diff --git a/src/options.c b/src/options.c
index 0dad965..9b7f280 100644
--- a/src/options.c
+++ b/src/options.c
@@ -346,14 +346,14 @@ void pyalpm_logcb(alpm_loglevel_t level, const char *fmt, va_list va_args) {
 
 void pyalpm_dlcb(const char *filename, off_t xfered, off_t total) {
   PyObject *result;
-  result = PyObject_CallFunction(global_py_callbacks[CB_DOWNLOAD], "sii", filename, xfered, total);
+  result = PyObject_CallFunction(global_py_callbacks[CB_DOWNLOAD], "sLL", filename, xfered, total);
   if (!result) PyErr_Print();
   Py_CLEAR(result);
 }
 
 void pyalpm_totaldlcb(off_t total) {
   PyObject *result;
-  result = PyObject_CallFunction(global_py_callbacks[CB_TOTALDL], "i", total);
+  result = PyObject_CallFunction(global_py_callbacks[CB_TOTALDL], "L", total);
   if (!result) PyErr_Print();
   Py_CLEAR(result);
 }
diff --git a/src/transaction.c b/src/transaction.c
index 09c4434..ca2d144 100644
--- a/src/transaction.c
+++ b/src/transaction.c
@@ -36,98 +36,151 @@ void pyalpm_eventcb(alpm_event_t event, void* data1, void *data2) {
   PyObject *obj2 = Py_None;
   switch(event) {
     case ALPM_EVENT_CHECKDEPS_START:
-      eventstr = "Checking dependencies";
+      eventstr = "ALPM_EVENT_CHECKDEPS_START";
       break;
     case ALPM_EVENT_CHECKDEPS_DONE:
-      eventstr = "Done checking dependencies";
+      eventstr = "ALPM_EVENT_CHECKDEPS_DONE";
       break;
     case ALPM_EVENT_FILECONFLICTS_START:
-      eventstr = "Checking file conflicts";
+      eventstr = "ALPM_EVENT_FILECONFLICTS_START";
       break;
     case ALPM_EVENT_FILECONFLICTS_DONE:
-      eventstr = "Done checking file conflicts";
+      eventstr = "ALPM_EVENT_FILECONFLICTS_DONE";
       break;
     case ALPM_EVENT_RESOLVEDEPS_START:
-      eventstr = "Resolving dependencies";
+      eventstr = "ALPM_EVENT_RESOLVEDEPS_START";
       break;
     case ALPM_EVENT_RESOLVEDEPS_DONE:
-      eventstr = "Done resolving dependencies";
+      eventstr = "ALPM_EVENT_RESOLVEDEPS_DONE";
       break;
     case ALPM_EVENT_INTERCONFLICTS_START:
-      eventstr = "Checking inter conflicts";
+      eventstr = "ALPM_EVENT_INTERCONFLICTS_START";
       break;
     case ALPM_EVENT_INTERCONFLICTS_DONE:
-      eventstr = "Done checking inter conflicts";
+      eventstr = "ALPM_EVENT_INTERCONFLICTS_DONE";
       break;
     case ALPM_EVENT_ADD_START:
-      eventstr = "Adding a package";
+      eventstr = "ALPM_EVENT_ADD_START";
       obj1 = pyalpm_package_from_pmpkg(data1);
       break;
     case ALPM_EVENT_ADD_DONE:
-      eventstr = "Done adding a package";
+      eventstr = "ALPM_EVENT_ADD_DONE";
       obj1 = pyalpm_package_from_pmpkg(data1);
       if (data2) obj2 = pyalpm_package_from_pmpkg(data2);
       break;
     case ALPM_EVENT_REMOVE_START:
-      eventstr = "Remove package";
+      eventstr = "ALPM_EVENT_REMOVE_START";
       obj1 = pyalpm_package_from_pmpkg(data1);
       break;
     case ALPM_EVENT_REMOVE_DONE:
-      eventstr = "Done removing package";
+      eventstr = "ALPM_EVENT_REMOVE_DONE";
       obj1 = pyalpm_package_from_pmpkg(data1);
       break;
     case ALPM_EVENT_UPGRADE_START:
-      eventstr = "Upgrading a package";
+      eventstr = "ALPM_EVENT_UPGRADE_START";
       obj1 = pyalpm_package_from_pmpkg(data1);
       obj2 = pyalpm_package_from_pmpkg(data2);
       break;
     case ALPM_EVENT_UPGRADE_DONE:
-      eventstr = "Done upgrading a package";
+      eventstr = "ALPM_EVENT_UPGRADE_DONE";
       obj1 = pyalpm_package_from_pmpkg(data1);
       obj2 = pyalpm_package_from_pmpkg(data2);
       break;
+    case ALPM_EVENT_DOWNGRADE_START:
+      eventstr = "ALPM_EVENT_DOWNGRADE_START";
+      obj1 = pyalpm_package_from_pmpkg(data1);
+      obj2 = pyalpm_package_from_pmpkg(data2);
+      break;
+    case ALPM_EVENT_DOWNGRADE_DONE:
+      eventstr = "ALPM_EVENT_DOWNGRADE_DONE";
+      obj1 = pyalpm_package_from_pmpkg(data1);
+      obj2 = pyalpm_package_from_pmpkg(data2);
+      break;
+    case ALPM_EVENT_REINSTALL_START:
+      eventstr = "ALPM_EVENT_REINSTALL_START";
+      obj1 = pyalpm_package_from_pmpkg(data1);
+      break;
+    case ALPM_EVENT_REINSTALL_DONE:
+      eventstr = "ALPM_EVENT_REINSTALL_DONE";
+      obj1 = pyalpm_package_from_pmpkg(data1);
+      break;
     case ALPM_EVENT_INTEGRITY_START:
-      eventstr = "Checking integrity";
+      eventstr = "ALPM_EVENT_INTEGRITY_START";
       break;
     case ALPM_EVENT_INTEGRITY_DONE:
-      eventstr = "Done checking integrity";
+      eventstr = "ALPM_EVENT_INTEGRITY_DONE";
       break;
     case ALPM_EVENT_LOAD_START:
+      eventstr = "ALPM_EVENT_LOAD_START";
+      break;
     case ALPM_EVENT_LOAD_DONE:
+      eventstr = "ALPM_EVENT_LOAD_DONE";
+      break;
     case ALPM_EVENT_DELTA_INTEGRITY_START:
+      eventstr = "ALPM_EVENT_DELTA_INTEGRITY_START";
+      break;
     case ALPM_EVENT_DELTA_INTEGRITY_DONE:
+      eventstr = "ALPM_EVENT_DELTA_INTEGRITY_DONE";
+      break;
     case ALPM_EVENT_DELTA_PATCHES_START:
+      eventstr = "ALPM_EVENT_DELTA_PATCHES_START";
+      break;
     case ALPM_EVENT_DELTA_PATCHES_DONE:
+      eventstr = "ALPM_EVENT_DELTA_PATCHES_DONE";
+      break;
     case ALPM_EVENT_DELTA_PATCH_START:
-      /* info here */
+      eventstr = "ALPM_EVENT_DELTA_PATCH_START";
+      obj1 = PyUnicode_FromFormat("%s", (char *)data1);
+      obj2 = PyUnicode_FromFormat("%s", (char *)data2);
+      break;
     case ALPM_EVENT_DELTA_PATCH_DONE:
+      eventstr = "ALPM_EVENT_DELTA_PATCH_DONE";
+      break;
     case ALPM_EVENT_DELTA_PATCH_FAILED:
+      eventstr = "ALPM_EVENT_DELTA_PATCH_FAILED";
+      break;
     case ALPM_EVENT_SCRIPTLET_INFO:
-      /* info here */
+      eventstr = "ALPM_EVENT_SCRIPTLET_INFO";
+      obj1 = PyUnicode_FromFormat("%s", data1);
+      break;
     case ALPM_EVENT_RETRIEVE_START:
-      /* info here */
-      eventstr = "event not implemented";
+      eventstr = "ALPM_EVENT_RETRIEVE_START";
       break;
     case ALPM_EVENT_DISKSPACE_START:
-      eventstr = "Checking disk space";
+      eventstr = "ALPM_EVENT_DISKSPACE_START";
       break;
     case ALPM_EVENT_DISKSPACE_DONE:
-      eventstr = "Done checking disk space";
+      eventstr = "ALPM_EVENT_DISKSPACE_DONE";
       break;
     case ALPM_EVENT_OPTDEP_REQUIRED:
+      eventstr = "ALPM_EVENT_OPTDEP_REQUIRED";
+      obj1 = pyalpm_package_from_pmpkg(data1);
+      obj2 = PyUnicode_FromFormat("%s", alpm_dep_compute_string(data2));
+      break;
     case ALPM_EVENT_DATABASE_MISSING:
+      eventstr = "ALPM_EVENT_DATABASE_MISSING";
+      obj1 = PyUnicode_FromFormat("%s", (char *)data1);
+      break;
     case ALPM_EVENT_KEYRING_START:
+      eventstr = "ALPM_EVENT_KEYRING_START";
+      break;
     case ALPM_EVENT_KEYRING_DONE:
+      eventstr = "ALPM_EVENT_KEYRING_DONE";
+      break;
     case ALPM_EVENT_KEY_DOWNLOAD_START:
+      eventstr = "ALPM_EVENT_KEY_DOWNLOAD_START";
+      break;
     case ALPM_EVENT_KEY_DOWNLOAD_DONE:
+      eventstr = "ALPM_EVENT_KEY_DOWNLOAD_DONE";
+      break;
     default:
       eventstr = "unknown event";
   }
   {
     PyObject *result = NULL;
-    if (global_py_callbacks[CB_PROGRESS]) {
-      result = PyObject_CallFunction(global_py_callbacks[CB_EVENT], "is(NN)",
-          event, eventstr, obj1, obj2);
+    if (global_py_callbacks[CB_EVENT]) {
+      result = PyObject_CallFunction(global_py_callbacks[CB_EVENT], "s(NN)",
+          eventstr, obj1, obj2);
     } else {
       PyErr_SetString(PyExc_RuntimeError, "event callback was called but it's not set!");
     }
@@ -137,15 +190,111 @@ void pyalpm_eventcb(alpm_event_t event, void* data1, void *data2) {
 }
 
 void pyalpm_questioncb(alpm_question_t question,
-        void* data1, void *data2, void* data3, int* retcode) {
+        void* data1, void *data2, void* data3, int *retcode) {
+  const char *eventstr;
+  PyObject *result = NULL;
+  if (global_py_callbacks[CB_QUESTION]) {
+    switch(question) {
+      case ALPM_QUESTION_INSTALL_IGNOREPKG:
+        eventstr = "ALPM_QUESTION_INSTALL_IGNOREPKG";
+        result = PyObject_CallFunction(global_py_callbacks[CB_QUESTION], "s(Ns)s",
+          eventstr, pyalpm_package_from_pmpkg(data1), data2, data3);
+        break;
+      case ALPM_QUESTION_REPLACE_PKG:
+        eventstr = "ALPM_QUESTION_REPLACE_PKG";
+        result = PyObject_CallFunction(global_py_callbacks[CB_QUESTION], "s(NN)s",
+          eventstr, pyalpm_package_from_pmpkg(data1), pyalpm_package_from_pmpkg(data2), data3);
+        break;
+      case ALPM_QUESTION_CONFLICT_PKG:
+        eventstr = "ALPM_QUESTION_CONFLICT_PKG";
+        result = PyObject_CallFunction(global_py_callbacks[CB_QUESTION], "s(ss)s",
+          eventstr, data1, data2, data3);
+        break;
+      case ALPM_QUESTION_CORRUPTED_PKG:
+        eventstr = "ALPM_QUESTION_CORRUPTED_PKG";
+        result = PyObject_CallFunction(global_py_callbacks[CB_QUESTION], "s(ss)s",
+          eventstr, data1, alpm_strerror(*(alpm_errno_t *)data2), data3);
+        break;
+      case ALPM_QUESTION_REMOVE_PKGS:
+        eventstr = "ALPM_QUESTION_REMOVE_PKGS";
+        result = PyObject_CallFunction(global_py_callbacks[CB_QUESTION], "s(Ns)s",
+          eventstr, alpmlist_to_pylist(data1, pyalpm_package_from_pmpkg), data2, data3);
+        break;
+      case ALPM_QUESTION_SELECT_PROVIDER:
+        {
+        char *depstring = alpm_dep_compute_string((alpm_depend_t *)data2);
+        eventstr = "ALPM_QUESTION_SELECT_PROVIDER";
+        result = PyObject_CallFunction(global_py_callbacks[CB_QUESTION], "s(Ns)s",
+          eventstr, alpmlist_to_pylist(data1, pyalpm_package_from_pmpkg), depstring, data3);
+        }
+        break;
+      case ALPM_QUESTION_IMPORT_KEY:
+        {
+        alpm_pgpkey_t *key = data1;
+        eventstr = "ALPM_QUESTION_IMPORT_KEY";
+        result = PyObject_CallFunction(global_py_callbacks[CB_QUESTION], "s(iicssi)s",
+          eventstr, key->revoked, key->length, key->pubkey_algo, key->fingerprint, key->uid, key->created, data3);
+        }
+        break;
+      default:
+        eventstr = "unknown event";
+        break;
+    }
+    {
+      long response;
+      response = PyLong_AsLong(result);
+      *retcode = (int)response;
+    }
+  }
+  else {
+    PyErr_SetString(PyExc_RuntimeError, "question callback was called but it's not set!");
+  }
+  if (PyErr_Occurred()) PyErr_Print();
+  Py_CLEAR(result);
 }
 
 void pyalpm_progresscb(alpm_progress_t op,
         const char* target_name, int percentage, size_t n_targets, size_t cur_target) {
+  const char *eventstr;
   PyObject *result = NULL;
+  switch(op) {
+    case ALPM_PROGRESS_ADD_START:
+      eventstr = "ALPM_PROGRESS_ADD_START";
+      break;
+    case ALPM_PROGRESS_UPGRADE_START:
+      eventstr = "ALPM_PROGRESS_UPGRADE_START";
+      break;
+    case ALPM_PROGRESS_DOWNGRADE_START:
+      eventstr = "ALPM_PROGRESS_DOWNGRADE_START";
+      break;
+    case ALPM_PROGRESS_REINSTALL_START:
+      eventstr = "ALPM_PROGRESS_REINSTALL_START";
+      break;
+    case ALPM_PROGRESS_REMOVE_START:
+      eventstr = "ALPM_PROGRESS_REMOVE_START";
+      break;
+    case ALPM_PROGRESS_CONFLICTS_START:
+      eventstr = "ALPM_PROGRESS_CONFLICTS_START";
+      break;
+    case ALPM_PROGRESS_DISKSPACE_START:
+      eventstr = "ALPM_PROGRESS_DISKSPACE_START";
+      break;
+    case ALPM_PROGRESS_INTEGRITY_START:
+      eventstr = "ALPM_PROGRESS_INTEGRITY_START";
+      break;
+    case ALPM_PROGRESS_LOAD_START:
+      eventstr = "ALPM_PROGRESS_LOAD_START";
+      break;
+    case ALPM_PROGRESS_KEYRING_START:
+      eventstr = "ALPM_PROGRESS_KEYRING_START";
+      break;
+    default:
+       eventstr = "unknown event";
+      break;
+  }
   if (global_py_callbacks[CB_PROGRESS]) {
-    result = PyObject_CallFunction(global_py_callbacks[CB_PROGRESS], "sinn",
-      target_name, percentage, n_targets, cur_target);
+    result = PyObject_CallFunction(global_py_callbacks[CB_PROGRESS], "ssinn",
+      eventstr, target_name, percentage, n_targets, cur_target);
   } else {
     PyErr_SetString(PyExc_RuntimeError, "progress callback was called but it's not set!");
   }
@@ -445,7 +594,7 @@ static struct PyMethodDef pyalpm_trans_methods[] = {
  */
 static PyTypeObject AlpmTransactionType = {
   PyVarObject_HEAD_INIT(NULL, 0)
-  "alpm.Transaction",    /*tp_name*/
+  "pyalpm.Transaction",    /*tp_name*/
   sizeof(AlpmHandle),  /*tp_basicsize*/
   .tp_flags = Py_TPFLAGS_DEFAULT,
   .tp_doc = "This class is the main interface to get/set libalpm options",
