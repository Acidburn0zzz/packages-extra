#!/usr/bin/env bash
. gettext.sh
export TEXTDOMAIN=downgrade
export TEXTDOMAINDIR=/usr/share/locale

prompt_to_install() {
  local pkg ans i=1

  (($#)) || return 1

  gettext 'Available packages:'
  printf "\n\n"

  for entry; do
    output_package "$((i++))" "$entry"
  done

  printf "\n"
  gettext 'select a package by number: '; read -r ans
  printf "\n"

  ((ans > 0 && ans <= $#)) && install_pkg "${!ans}"
}

prompt_to_ignore() {
  local pkg="$1" ans

  grep -Eq '^IgnorePkg.*( |=)'"$pkg"'( |$)' "$PACMAN_CONF" && return 0

  printf "\n"
  eval_gettext "add \$pkg to IgnorePkg? [y/n] "; read -r ans
  printf "\n"

  if [[ "${ans,,}" == $(gettext 'y')* ]]; then
    sudo sed -i "s/^#\?\(IgnorePkg.*\)/\1 $pkg/" "$PACMAN_CONF"
  fi
}

search_packages() {
  ((NOARM)) || \
    curl --fail --silent --data "arch=$ARCH" \
         --data-urlencode "pkgname=$1" "$ARM_URL/exact" | cut -d '|' -f 5

  ((NOCACHE)) || \
    find $( sed '/^#\?CacheDir *= *\(.*\)$/!d;s//\1/' "$PACMAN_CONF" ) \
      -name "$1-[0-9R]*.pkg.tar.[gx]z"
}

sort_packages() {
  grep -Fv 'testing/' \
    | awk 'BEGIN { FS="/"; OFS="|" } { print $NF, $0 }' \
    | sort -rV -t '|' -k 1 | cut -d '|' -f 2-
}

output_package() {
  printf "%4.4s) %s\n" "$1" "$(
    sed 's|http://.*/\([^/]\+\)$|\1 ('"$(gettext 'remote')"')|;
         s|^/.*/\([^/]\+\)$|\1 ('"$(gettext 'local')"')|;' <<< "$2")"
}

install_pkg() {
  local pkg="$1" url

  if [[ "$pkg" == 'http://'* ]]; then
    url="$pkg"
    pkg="${url##*/}"

    curl --silent "$url" > "$pkg"
  fi

  [[ -f "$pkg" ]] && sudo "$PACMAN" -U "$pkg"
}

ARCH=${ARCH:-$(uname -m)}
PACMAN="${PACMAN:-pacman}"
PACMAN_CONF="${PACMAN_CONF:-/etc/pacman.conf}"
ARM_URL="${ARM_URL:-http://repo-arm.archlinuxcn.org}"
NOARM=${NOARM:-0}
NOCACHE=${NOCACHE:-0}
NOSUDO=${NOSUDO:-0}

if [[ -z "$1" ]] && ((!LIB)); then
  ( gettext 'usage: downgrade <pkg>, ...'; echo
    gettext 'see downgrade(8) for details.'; echo
  ) >&2
  exit 1
fi

if ((NOSUDO)) || ! type -p sudo &>/dev/null; then
  sudo() {
    printf -v cmd "%q " "$@"
    su root -c "$cmd"
  }
fi

for term; do
  candidates=( $(search_packages "$term" | sort_packages) )
  prompt_to_install "${candidates[@]}" && prompt_to_ignore "$term"
done
