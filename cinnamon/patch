diff --git a/configure.ac b/configure.ac
index acdcc03..3f0a5fe 100644
--- a/configure.ac
+++ b/configure.ac
@@ -36,10 +36,6 @@ AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE",
 
 PKG_PROG_PKG_CONFIG([0.22])
 
-# GConf stuff
-AC_PATH_PROG(GCONFTOOL, gconftool-2, no)
-AM_GCONF_SOURCE_2
-
 GLIB_GSETTINGS
 
 # Get a value to substitute into cinnamon.in
@@ -130,6 +126,7 @@ PKG_CHECK_EXISTS([gnome-bluetooth-1.0 >= 3.1.0],
         [BLUETOOTH_DIR=`$PKG_CONFIG --variable=applet_libdir gnome-bluetooth-1.0`
 	 BLUETOOTH_LIBS=`$PKG_CONFIG --variable=applet_libs gnome-bluetooth-1.0`
 	 AC_SUBST([BLUETOOTH_LIBS],["$BLUETOOTH_LIBS"])
+	 AC_SUBST([BLUETOOTH_DIR],["$BLUETOOTH_DIR"])
 	 AC_DEFINE_UNQUOTED([BLUETOOTH_DIR],["$BLUETOOTH_DIR"],[Path to installed GnomeBluetooth typelib and library])
 	 AC_DEFINE([HAVE_BLUETOOTH],[1],[Define if you have libgnome-bluetooth-applet])
 	 AC_SUBST([HAVE_BLUETOOTH],[1])
diff --git a/data/Makefile.am b/data/Makefile.am
index fc6784b..8ab4f9d 100644
--- a/data/Makefile.am
+++ b/data/Makefile.am
@@ -69,23 +71,14 @@ gschemas.compiled: $(gsettings_SCHEMAS:.xml=.valid)
 all-local: gschemas.compiled
 
 
-# GConf schemas: provide defaults for keys from Metacity we are overriding
-gconfschemadir  = @GCONF_SCHEMA_FILE_DIR@
-gconfschema_DATA = cinnamon.schemas
-
 shadersdir = $(pkgdatadir)/shaders
 shaders_DATA = \
 	shaders/dim-window.glsl
 
-install-data-local:
-	GCONF_CONFIG_SOURCE=$(GCONF_SCHEMA_CONFIG_SOURCE) $(GCONFTOOL) --makefile-install-rule $(srcdir)/$(gconfschema_DATA)
-
-
 
 EXTRA_DIST =						\
 	cinnamon.desktop.in.in			\
 	$(menu_DATA)					\
-	$(gconfschema_DATA)				\
 	$(shaders_DATA)					\
 	org.cinnamon.gschema.xml.in
diff --git a/data/org.cinnamon.gschema.xml b/data/org.cinnamon.gschema.xml
deleted file mode 100644
index 896d61f..0000000
--- a/data/org.cinnamon.gschema.xml
+++ /dev/null
@@ -1,299 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<schemalist>
-  <schema path="/org/cinnamon/" id="org.cinnamon" gettext-domain="@GETTEXT_PACKAGE@">
-    <key type="b" name="development-tools">
-      <default>true</default>
-      <summary>Enable internal tools useful for developers and testers from Alt-F2</summary>
-      <description>Allows access to internal debugging and monitoring tools using the Alt-F2 dialog.</description>
-    </key>
-    <key type="as" name="enabled-extensions">
-      <default>[]</default>
-      <summary>Uuids of extensions to enable</summary>
-      <description>Cinnamon extensions have a uuid property; this key lists extensions which should be loaded. disabled-extensions overrides this setting for extensions that appear in both lists.</description>
-    </key>
-    
-    <key type="as" name="enabled-applets">
-      <default>['panel1:left:0:menu@cinnamon.org', 'panel1:left:1:show-desktop@cinnamon.org', 'panel1:left:2:panel-launchers@cinnamon.org', 'panel1:left:3:window-list@cinnamon.org', 'panel1:right:0:removable-drives@cinnamon.org', 'panel1:right:1:keyboard@cinnamon.org', 'panel1:right:2:settings@cinnamon.org', 'panel1:right:3:bluetooth@cinnamon.org', 'panel1:right:4:network@cinnamon.org', 'panel1:right:5:sound@cinnamon.org', 'panel1:right:6:power@cinnamon.org', 'panel1:right:7:systray@cinnamon.org', 'panel1:right:8:calendar@cinnamon.org']</default>
-      <summary>Uuids of applets to enable</summary>
-      <description>Cinnamon applets have a uuid property; this key lists applets which should be loaded.</description>
-    </key>
-    
-    <key type="b" name="panel-autohide">
-      <default>false</default>
-      <summary>Auto-hide panel</summary>
-      <description>Whether the panel autohides or not.</description>
-    </key>
-    
-    <key type="b" name="desktop-effects">
-      <default>true</default>
-      <summary>Enable desktop effects</summary>
-      <description>Whether to enable desktop effects and window animations.</description>
-    </key>
-    
-    <key type="s" name="desktop-effects-close-effect">
-      <default>"scale"</default>
-      <summary>Effect used when closing windows</summary>
-      <description>An effect: scale, fade, none</description>
-    </key>
-    
-     <key type="s" name="desktop-effects-close-transition">
-      <default>"easeInBack"</default>
-      <summary>Transition used when closing windows</summary>
-      <description>A Tweener transition</description>
-    </key>
-    
-    <key type="i" name="desktop-effects-close-time">
-      <default>250</default>
-      <summary>Duration of the effect (in milliseconds)</summary>
-      <description>Duration of the effect (in milliseconds)</description>
-    </key>
-    
-    <key type="s" name="desktop-effects-map-effect">
-      <default>"scale"</default>
-      <summary>Effect used when mapping windows</summary>
-      <description>An effect: scale, fade, none</description>
-    </key>
-    
-     <key type="s" name="desktop-effects-map-transition">
-      <default>"easeOutSine"</default>
-      <summary>Transition used when mapping windows</summary>
-      <description>A Tweener transition</description>
-    </key>
-    
-    <key type="i" name="desktop-effects-map-time">
-      <default>250</default>
-      <summary>Duration of the effect (in milliseconds)</summary>
-      <description>Duration of the effect (in milliseconds)</description>
-    </key>
-    
-    
-    <key type="s" name="desktop-effects-minimize-effect">
-      <default>"scale"</default>
-      <summary>Effect used when minimizing windows</summary>
-      <description>An effect: traditional, scale, fade, none</description>
-    </key>
-    
-     <key type="s" name="desktop-effects-minimize-transition">
-      <default>"easeInSine"</default>
-      <summary>Transition used when minimizing windows</summary>
-      <description>A Tweener transition</description>
-    </key>
-    
-    <key type="i" name="desktop-effects-minimize-time">
-      <default>250</default>
-      <summary>Duration of the effect (in milliseconds)</summary>
-      <description>Duration of the effect (in milliseconds)</description>
-    </key>
-    
-    <key type="s" name="desktop-effects-maximize-effect">
-      <default>"none"</default>
-      <summary>Effect used when maximizing windows</summary>
-      <description>An effect: none</description>
-    </key>
-    
-     <key type="s" name="desktop-effects-maximize-transition">
-      <default>"easeInBack"</default>
-      <summary>Transition used when maximizing windows</summary>
-      <description>A Tweener transition</description>
-    </key>
-    
-    <key type="i" name="desktop-effects-maximize-time">
-      <default>400</default>
-      <summary>Duration of the effect (in milliseconds)</summary>
-      <description>Duration of the effect (in milliseconds)</description>
-    </key>
-    
-    <key type="s" name="desktop-effects-unmaximize-effect">
-      <default>"none"</default>
-      <summary>Effect used when unmaximizing windows</summary>
-      <description>An effect: none</description>
-    </key>
-    
-     <key type="s" name="desktop-effects-unmaximize-transition">
-      <default>"easeOutBounce"</default>
-      <summary>Transition used when unmaximizing windows</summary>
-      <description>A Tweener transition</description>
-    </key>
-    
-    <key type="i" name="desktop-effects-unmaximize-time">
-      <default>400</default>
-      <summary>Duration of the effect (in milliseconds)</summary>
-      <description>Duration of the effect (in milliseconds)</description>
-    </key>
-    
-    <key type="s" name="desktop-layout">
-      <default>"traditional"</default>
-      <summary>Layout style</summary>
-      <description>Layout styles: traditional (1 panel at the bottom), flipped (1 panel on top), classic (1 panel on top, 1 panel at the bottom)</description>
-    </key>
-    
-    <key type="s" name="date-format">
-      <default>"YYYY-MM-DD"</default>
-      <summary>Auto-hide panel</summary>
-      <description>Whether the panel autohides or not.</description>
-    </key>
-    
-    <key type="s" name="menu-text">
-      <default>"Menu"</default>
-      <summary>Text for the menu</summary>
-      <description>The text shown in the Menu label.</description>
-    </key>
-    
-    <key type="s" name="menu-icon">
-      <default>"/usr/share/cinnamon/theme/menu.png"</default>
-      <summary>Icon for the menu</summary>
-      <description>The icon shown in the Menu button.</description>
-    </key>
-    
-     <key type="i" name="menu-hover-delay">
-      <default>0</default>
-      <summary>Duration of the delay before which a category is selected when it is hovered</summary>
-      <description>Duration of the delay (in milliseconds)</description>
-    </key>
-
-    <key type="i" name="number-workspaces">
-	<default>2</default>
-	<summary>Number of workspaces in Cinnamon session</summary>
-	<description>Number of Workspaces</description>
-    </key>
-    
-     <key type="b" name="overview-corner-visible">
-      <default>false</default>
-      <summary>Enable or disable the overview corner icon</summary>
-      <description>Whether the overview icon is visible or not.</description>
-    </key>
-    
-    <key type="b" name="overview-corner-hover">
-      <default>true</default>
-      <summary>Enable or disable the overview hot corner</summary>
-      <description>Whether the overview hot corner is enabled or not.</description>
-    </key>
-    
-    <key type="s" name="overview-corner-position">
-      <default>"topLeft"</default>
-      <summary>Set hot corner position</summary>
-      <description>Change the position of the overview hot corner on the screen.</description>
-    </key>
-    
-    <key type="s" name="overview-corner-functionality">
-      <default>"expo"</default>
-      <summary>Set hot corner functionality</summary>
-      <description>Set the function that is executed when hitting the hot corner.</description>
-    </key>
-    
-    <key type="as" name="panel-launchers">
-      <default>[ 'firefox.desktop', 'gnome-terminal.desktop', 'nautilus.desktop']</default>
-      <summary>Desktop files of the applications to put in the panel launchers applet</summary>
-      <description>Cinnamon allows to show applications launchers on the panel. This key lists the desktop files of the applications to show there.</description>
-    </key>
-    
-    <key type="b" name="enable-app-monitoring">
-      <default>true</default>
-      <summary>Whether to collect stats about applications usage</summary>
-      <description>Cinnamon normally monitors active applications in order to present the most used ones (e.g. in launchers). While this data will be kept private, you may want to disable this for privacy reasons. Please note that doing so won't remove already saved data.</description>
-    </key>
-    
-    <key type="as" name="favorite-apps">
-      <default>[ 'firefox.desktop', 'mintInstall.desktop', 'cinnamon-settings.desktop', 'xchat.desktop', 'gnome-terminal.desktop', 'nautilus.desktop' ]</default>
-      <summary>List of desktop file IDs for favorite applications</summary>
-      <description>The applications corresponding to these identifiers will be displayed in the favorites area.</description>
-    </key>
-    
-    <key type="as" name="disabled-open-search-providers">
-      <default>[]</default>
-      <summary>disabled OpenSearch providers</summary>
-    </key>
-    
-    <key type="as" name="command-history">
-      <default>[]</default>
-      <summary>History for command (Alt-F2) dialog</summary>
-    </key>
-    
-    <key type="as" name="looking-glass-history">
-      <default>[]</default>
-      <summary>History for the looking glass dialog</summary>
-    </key>
-    
-    <key type="i" name="saved-im-presence">
-      <default>1</default>
-      <summary/>
-    </key>
-    
-    <key type="i" name="saved-session-presence">
-      <default>0</default>
-      <summary/>
-    </key>
-    
-     <key type="b" name="panel-edit-mode">
-      <default>false</default>
-      <summary>Panel edit mode</summary>
-      <description>A mode for the user to drag and drop applets and modify the look of the desktop</description>
-    </key>
-    
-    <key type="b" name="panel-launchers-draggable">
-      <default>true</default>
-      <summary>Whether panel launchers are draggable</summary>
-    </key>
-    
-    <child schema="org.cinnamon.calendar" name="calendar"/>
-    <child schema="org.cinnamon.theme" name="theme"/>   
-    <child schema="org.cinnamon.recorder" name="recorder"/>
-    <child schema="org.cinnamon.keyboard" name="keyboard"/>
-  </schema>
- 
-  <schema path="/org/cinnamon/theme/" id="org.cinnamon.theme" gettext-domain="@GETTEXT_PACKAGE@">
-    <key type="s" name="name">
-      <default>""</default>
-      <summary>Theme name</summary>
-      <description>The name of the theme</description>
-    </key>
-  </schema>
- 
-  <schema path="/org/cinnamon/keyboard/" id="org.cinnamon.keyboard" gettext-domain="@GETTEXT_PACKAGE@">
-    <key type="s" name="keyboard-type">
-      <default>'touch'</default>
-      <summary>Which keyboard to use</summary>
-      <description>The type of keyboard to use.</description>
-    </key>
-  </schema>
-
-  <schema path="/org/cinnamon/calendar/" id="org.cinnamon.calendar" gettext-domain="@GETTEXT_PACKAGE@">
-          
-    <key type="b" name="show-weekdate">
-      <default>false</default>
-      <summary>Show the week date in the calendar</summary>
-      <description>If true, display the ISO week date in the calendar.</description>
-    </key>
-    
-     <key type="s" name="date-format">
-      <default>'%a %b %e, %H:%M'</default>
-      <summary>Format for the date in the panel</summary>
-      <description>Format used to show the date in the panel.</description>
-    </key>
-    
-     <key type="s" name="date-format-full">
-      <default>'%A %B %e, %Y'</default>
-      <summary>Format for the date in the applet menu</summary>
-      <description>Format used to show the date in the applet menu.</description>
-    </key>
-    
-  </schema>
-
-  <schema path="/org/cinnamon/recorder/" id="org.cinnamon.recorder" gettext-domain="@GETTEXT_PACKAGE@">
-    <key type="i" name="framerate">
-      <default>15</default>
-      <summary>Framerate used for recording screencasts.</summary>
-      <description>The framerate of the resulting screencast recordered by Cinnamon's screencast recorder in frames-per-second.</description>
-    </key>
-    <key type="s" name="pipeline">
-      <default>''</default>
-      <summary>The gstreamer pipeline used to encode the screencast</summary>
-      <description>Sets the GStreamer pipeline used to encode recordings. It follows the syntax used for gst-launch. The pipeline should have an unconnected sink pad where the recorded video is recorded. It will normally have a unconnected source pad; output from that pad will be written into the output file. However the pipeline can also take care of its own output - this might be used to send the output to an icecast server via shout2send or similar. When unset or set to an empty value, the default pipeline will be used. This is currently 'videorate ! vp8enc quality=10 speed=2 threads=%T ! queue ! webmmux' and records to WEBM using the VP8 codec. %T is used as a placeholder for a guess at the optimal thread count on the system.</description>
-    </key>
-    <key type="s" name="file-extension">
-      <default>'webm'</default>
-      <summary>File extension used for storing the screencast</summary>
-      <description>The filename for recorded screencasts will be a unique filename based on the current date, and use this extension. It should be changed when recording to a different container format.</description>
-    </key>
-  </schema>
-</schemalist>
diff --git a/data/org.cinnamon.gschema.xml.in b/data/org.cinnamon.gschema.xml.in
index d21d28f..e6ff411 100644
--- a/data/org.cinnamon.gschema.xml.in
+++ b/data/org.cinnamon.gschema.xml.in
@@ -207,6 +207,14 @@
       </_description>
     </key>
 
+    <key type="b" name="activate-menu-applet-on-hover">
+      <default>false</default>
+      <_summary>Enable or disable activation menu applet on hover</_summary>
+      <_description>
+            Another way to open the menu by just hovering the mouse pointer as opposed to clicking on it.
+      </_description>
+    </key>
+
     <key type="i" name="number-workspaces">
 	<default>2</default>
 	<_summary>Number of workspaces in Cinnamon session</_summary>
@@ -315,6 +323,7 @@
     <child name="theme" schema="org.cinnamon.theme"/>   
     <child name="recorder" schema="org.cinnamon.recorder"/>
     <child name="keyboard" schema="org.cinnamon.keyboard"/>
+    <child name="power" schema="org.cinnamon.power" />
   </schema>
  
   <schema id="org.cinnamon.theme" path="/org/cinnamon/theme/"
@@ -338,6 +347,14 @@
       </_description>
     </key>
   </schema>
+  
+  <schema id="org.cinnamon.power" path="/org/cinnamon/power/" gettext-domain="@GETTEXT_PACKAGE">
+      <key name="power-label" type="s">
+          <default>'percent'</default>
+          <_summary>Display percentage in power applet</_summary>
+          <_description>Display battery remaining as percentage or time in power applet.</_description>
+    </key>
+  </schema>
 
   <schema id="org.cinnamon.calendar" path="/org/cinnamon/calendar/"
           gettext-domain="@GETTEXT_PACKAGE@">
@@ -405,4 +422,40 @@
       </_description>
     </key>
   </schema>
+
+  <schema id="org.cinnamon.overrides" path="/org/cinnamon/overrides/">
+    <key name="attach-modal-dialogs" type="b">
+      <default>true</default>
+      <summary>Attach modal dialog to the parent window</summary>
+      <description>
+        This key overrides the key in org.gnome.muffin when running
+        Cinnamon.
+      </description>
+    </key>
+
+    <key name="button-layout" type="s">
+      <default>":close"</default>
+      <summary>Arrangement of buttons on the titlebar</summary>
+      <description>
+        This key overrides the key in org.gnome.desktop.wm.preferences when
+        running Cinnamon.
+      </description>
+    </key>
+
+    <key name="edge-tiling" type="b">
+      <default>true</default>
+      <summary>Enable edge tiling when dropping windows on screen edges</summary>
+      <description>
+        This key overrides the key in org.gnome.muffin when running Cinnamon.
+      </description>
+    </key>
+
+    <key name="workspaces-only-on-primary" type="b">
+      <default>true</default>
+      <summary>Workspaces only on primary monitor</summary>
+      <description>
+        This key overrides the key in org.gnome.muffin when running Cinnamon.
+      </description>
+    </key>
+  </schema>
 </schemalist>
diff --git a/data/theme/add-workspace-hover.png b/data/theme/add-workspace-hover.png
new file mode 100644
index 0000000..0b09af1
Binary files /dev/null and b/data/theme/add-workspace-hover.png differ
diff --git a/data/theme/add-workspace.png b/data/theme/add-workspace.png
index 9b1a80d..220fd3c 100644
Binary files a/data/theme/add-workspace.png and b/data/theme/add-workspace.png differ
diff --git a/data/theme/cinnamon.css b/data/theme/cinnamon.css
index eda3fb8..af14106 100644
--- a/data/theme/cinnamon.css
+++ b/data/theme/cinnamon.css
@@ -47,7 +47,7 @@ StScrollBar StButton#hhandle:hover,
 StScrollBar StButton#vhandle:hover {
 	background-color: rgba(204,204,204,0.5);
 }
-StTooltip StLabel {
+#Tooltip {
 	border: 1px solid rgba(212,185,67,1.0);
 	border-radius: 4px;
 	padding: 2px 12px;
@@ -358,8 +358,11 @@ StTooltip StLabel {
 	background-image: url("add-workspace.png");
 	height: 200px;
 	width: 35px;
+	transition-duration: 300;
 }
-.workspace-add-button:hover {	
+.workspace-add-button:hover {
+	background-image: url("add-workspace-hover.png");
+	transition-duration: 300;
 }
 
 .workspace-close-button {
@@ -390,6 +393,17 @@ StTooltip StLabel {
 .window-close:rtl {
 	-st-background-image-shadow: 2px 2px 6px rgba(0,0,0,0.5);
 }
+
+.window-close-area {
+	background-image: url("trash-icon.png");
+	background-color: rgba(60, 60, 60, 0.8);
+	border: 4px solid rgba(128,128,128,0.8);
+	border-bottom-width: 0px;
+	border-radius: 20px 20px 0px 0px;
+	height: 120px;
+	width: 400px;
+}
+
 .icon-grid {
 	spacing: 36px;
 	-cinnamon-grid-item-size: 118px;
@@ -406,6 +420,12 @@ StTooltip StLabel {
 	transition-duration: 100;
 	text-align: center;
 }
+
+.expo-background {
+	background-gradient-start: #000;
+	background-gradient-end: #AAA;
+	background-gradient-direction: vertical
+}
 /* ===================================================================
  * ViewSelector 
  * ===================================================================*/
@@ -1411,7 +1431,8 @@ StTooltip StLabel {
  * Sound Applet (status/volume.js)
  * ===================================================================*/
 .sound-button-container {
-	padding-right: 5px;
+	padding-right: 3px;
+	padding-left: 3px;
 }
 .sound-button {
 	width: 22px;
@@ -1427,7 +1448,8 @@ StTooltip StLabel {
 	icon-size: 1.4em;
 }
 .sound-track-infos {
-	padding-left: 10px;
+	padding-left: 5px;
+	padding-right: 5px;
 }
 .sound-track-info {
 	padding-bottom: 4px;
@@ -1437,6 +1459,7 @@ StTooltip StLabel {
 }
 .sound-track-info StLabel {
 	padding-left: 5px;
+	padding-right: 5px;
 }
 .sound-track-box {
 	padding-top: 20px;
@@ -1450,10 +1473,13 @@ StTooltip StLabel {
 .sound-volume-menu-item StIcon {
 	icon-size: 1.14em;
 	padding-left: 8px;
+	padding-right: 8px;
 }
 .sound-playback-control {
 	padding-top: 5px;
 	padding-bottom: 10px;
+	padding-left: 10px;
+	padding-right: 10px;
 }
 /* ===================================================================
  * Workspace Switcher applet (workspaceSwitcher.js)
diff --git a/data/theme/trash-icon.png b/data/theme/trash-icon.png
new file mode 100644
index 0000000..af4d881
Binary files /dev/null and b/data/theme/trash-icon.png differ
diff --git a/files/usr/lib/cinnamon-settings/cinnamon-settings.py b/files/usr/lib/cinnamon-settings/cinnamon-settings.py
index dc1159b..7310ec9 100755
--- a/files/usr/lib/cinnamon-settings/cinnamon-settings.py
+++ b/files/usr/lib/cinnamon-settings/cinnamon-settings.py
@@ -130,7 +130,8 @@ class ThemeViewSidePage (SidePage):
         scrolledWindow = Gtk.ScrolledWindow()   
         cinnamon_theme_vbox.pack_start(scrolledWindow, True, True, 2)
         
-        iconView = Gtk.IconView()     
+        iconView = Gtk.IconView()    
+        iconView.set_columns(4)
         iconView.set_item_padding(2)  
         iconView.set_row_spacing(2)
         self.model = Gtk.ListStore(str, GdkPixbuf.Pixbuf)
diff --git a/files/usr/share/cinnamon/applets/menu@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/menu@cinnamon.org/applet.js
index 8dc374f..59518ff 100644
--- a/files/usr/share/cinnamon/applets/menu@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/menu@cinnamon.org/applet.js
@@ -500,6 +500,18 @@ MyApplet.prototype = {
             this.menuManager.addMenu(this.menu);   
                         
             this.actor.connect('key-press-event', Lang.bind(this, this._onSourceKeyPress));
+
+            let openOnHover = global.settings.get_boolean("activate-menu-applet-on-hover");
+            if (openOnHover)
+                this._openMenuId = this.actor.connect('enter-event', Lang.bind(this, this.openMenu));
+
+            global.settings.connect("changed::activate-menu-applet-on-hover", Lang.bind(this, function() {
+                let openOnHover = global.settings.get_boolean("activate-menu-applet-on-hover");
+                if (openOnHover)
+                    this._openMenuId = this.actor.connect('enter-event', Lang.bind(this, this.openMenu));
+                else
+                    this.actor.disconnect(this._openMenuId);
+            }));
                         
             this.menu.actor.add_style_class_name('menu-background');
             this.menu.connect('open-state-changed', Lang.bind(this, this._onOpenStateChanged));                                
@@ -562,7 +574,11 @@ MyApplet.prototype = {
             global.logError(e);
         }
     },
-    
+
+    openMenu: function() {
+        this.menu.open(true);
+    },
+
     on_orientation_changed: function (orientation) {
         this.menu.destroy();
         this.menu = new Applet.AppletPopupMenu(this, orientation);
diff --git a/files/usr/share/cinnamon/applets/panel-launchers@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/panel-launchers@cinnamon.org/applet.js
index 03c22c2..ab9d3ae 100644
--- a/files/usr/share/cinnamon/applets/panel-launchers@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/panel-launchers@cinnamon.org/applet.js
@@ -11,6 +11,7 @@ const Signals = imports.signals;
 const GLib = imports.gi.GLib;
 const Tooltips = imports.ui.tooltips;
 const DND = imports.ui.dnd;
+const Tweener = imports.ui.tweener;
 
 let pressLauncher = null;
 
@@ -145,7 +146,34 @@ PanelAppLauncher.prototype = {
         else return this.app.create_icon_texture(20);
     },
     
+    _animateIcon: function(step){
+        if (step>=3) return;
+        Tweener.addTween(this.icon,
+                         { width: 13,
+                           height: 13,
+                           time: 0.2,
+                           transition: 'easeOutQuad',
+                           onComplete: function(){
+                               Tweener.addTween(this.icon,
+                                                 { width: 20,
+                                                   height: 20,
+                                                   time: 0.2,
+                                                   transition: 'easeOutQuad',
+                                                   onComplete: function(){
+                                                       this._animateIcon(step+1);
+                                                   },
+                                                   onCompleteScope: this
+                                                 });
+                           },
+                           onCompleteScope: this
+                         });
+    },
+    
     launch: function() {
+        let allocation = this._iconBox.get_allocation_box();
+        this._iconBox.width = allocation.x2 - allocation.x1;
+        this._iconBox.height = allocation.y2 - allocation.y1;
+        this._animateIcon(0);
         if (this.is_custom()) this.appinfo.launch([], null);
         else this.app.open_new_window(-1);
     },
diff --git a/files/usr/share/cinnamon/applets/power@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/power@cinnamon.org/applet.js
index 179fa8e..0500749 100644
--- a/files/usr/share/cinnamon/applets/power@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/power@cinnamon.org/applet.js
@@ -5,6 +5,8 @@ const Lang = imports.lang;
 const St = imports.gi.St;
 const PopupMenu = imports.ui.popupMenu;
 
+const POWER_SCHEMA = "org.cinnamon.power"
+const SHOW_PERCENTAGE_KEY = "power-label";
 const BUS_NAME = 'org.gnome.SettingsDaemon';
 const OBJECT_PATH = '/org/gnome/SettingsDaemon/Power';
 
@@ -33,6 +35,12 @@ const UPDeviceState = {
     PENDING_DISCHARGE: 6
 };
 
+const LabelDisplay = {
+    NONE: 'none',
+    PERCENT: 'percent',
+    TIME: 'time'
+};
+
 const PowerManagerInterface = {
     name: 'org.gnome.SettingsDaemon.Power',
     methods: [
@@ -109,6 +117,7 @@ function MyApplet(orientation) {
     this._init(orientation);
 }
 
+
 MyApplet.prototype = {
     __proto__: Applet.TextIconApplet.prototype,
 
@@ -122,7 +131,7 @@ MyApplet.prototype = {
             
             this.set_applet_icon_symbolic_name('battery-missing');            
             this._proxy = new PowerManagerProxy(DBus.session, BUS_NAME, OBJECT_PATH);
-            
+
             let icon = this.actor.get_children()[0];
             this.actor.remove_actor(icon);
             let box = new St.BoxLayout({ name: 'batteryBox' });
@@ -136,6 +145,13 @@ MyApplet.prototype = {
             this._deviceItems = [ ];
             this._hasPrimary = false;
             this._primaryDeviceId = null;
+            
+            let settings = new Gio.Settings({ schema: POWER_SCHEMA }); 
+            this._labelDisplay = settings.get_string(SHOW_PERCENTAGE_KEY);
+            let applet = this;
+            settings.connect('changed::'+SHOW_PERCENTAGE_KEY, function() {
+                applet._switchLabelDisplay(settings.get_string(SHOW_PERCENTAGE_KEY));
+            });
 
             this._batteryItem = new PopupMenu.PopupMenuItem('', { reactive: false });
             this._primaryPercentage = new St.Label();
@@ -144,6 +160,26 @@ MyApplet.prototype = {
 
             this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
             this._otherDevicePosition = 2;
+            
+            // Setup label display settings
+            this._displayItem = new PopupMenu.PopupSubMenuMenuItem(_("Display"));
+            this.menu.addMenuItem(this._displayItem);
+            this._displayPercentageItem = new PopupMenu.PopupMenuItem(_("Show percentage"));
+            this._displayPercentageItem.connect('activate', Lang.bind(this, function() {
+                settings.set_string(SHOW_PERCENTAGE_KEY, LabelDisplay.PERCENT);
+            }));
+            this._displayItem.menu.addMenuItem(this._displayPercentageItem);
+            this._displayTimeItem = new PopupMenu.PopupMenuItem(_("Show time remaining"));
+            this._displayTimeItem.connect('activate', Lang.bind(this, function() {
+                settings.set_string(SHOW_PERCENTAGE_KEY, LabelDisplay.TIME);
+            }));
+            this._displayItem.menu.addMenuItem(this._displayTimeItem);
+            this._displayNoneItem = new PopupMenu.PopupMenuItem(_("Hide label"));
+            this._displayNoneItem.connect('activate', Lang.bind(this, function() {
+                settings.set_string(SHOW_PERCENTAGE_KEY, LabelDisplay.NONE);
+            }));
+            this._displayItem.menu.addMenuItem(this._displayNoneItem);
+            this._switchLabelDisplay(this._labelDisplay);
 
             this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
             this.menu.addSettingsAction(_("Power Settings"), 'gnome-power-panel.desktop');
@@ -159,6 +195,26 @@ MyApplet.prototype = {
     on_applet_clicked: function(event) {
         this.menu.toggle();        
     },
+
+    _switchLabelDisplay: function(display) {
+            this._labelDisplay = display;
+
+            this._displayPercentageItem.setShowDot(false);
+            this._displayNoneItem.setShowDot(false);
+            this._displayTimeItem.setShowDot(false);
+
+            if (this._labelDisplay == LabelDisplay.PERCENT) {
+                this._displayPercentageItem.setShowDot(true);
+            }
+            else if (this._labelDisplay == LabelDisplay.TIME) {
+                this._displayTimeItem.setShowDot(true);
+            }
+            else {
+                this._displayNoneItem.setShowDot(true);
+            }
+
+            this._updateLabel();
+    },
     
     _readPrimaryDevice: function() {
         this._proxy.GetPrimaryDeviceRemote(Lang.bind(this, function(device, error) {
@@ -251,15 +307,29 @@ MyApplet.prototype = {
                 this._mainLabel.set_text("");
                 return;
             }
-            for (let i = 0; i < devices.length; i++) {
-                let [device_id, device_type, icon, percentage, state, time] = devices[i];
-                if (device_type == UPDeviceType.BATTERY || device_id == this._primaryDeviceId) {
-                    let percentageText = C_("percent of battery remaining", "%d%%").format(Math.round(percentage));
-                    this._mainLabel.set_text(percentageText);
-                    return;
+
+            if (this._labelDisplay != LabelDisplay.NONE) {
+                for (let i = 0; i < devices.length; i++) {
+                    let [device_id, device_type, icon, percentage, state, time] = devices[i];
+                    if (device_type == UPDeviceType.BATTERY || device_id == this._primaryDeviceId) {
+                        let labelText = "";
+
+                        if (this._labelDisplay == LabelDisplay.PERCENT || time == 0) {
+                            labelText = C_("percent of battery remaining", "%d%%").format(Math.round(percentage));
+                        }
+                        else if (this._labelDisplay == LabelDisplay.TIME) {
+                            let seconds = time / 60;
+                            let minutes = Math.floor(seconds % 60);
+                            let hours = Math.floor(seconds / 60);
+                            labelText = C_("time of battery remaining", "%d:%02d").format(hours,minutes);
+                        }
+
+                        this._mainLabel.set_text(labelText);
+                        return;
+                    }
                 }
             }
-            // no battery found... hot-unplugged?
+            // Display disabled or no battery found... hot-unplugged?
             this._mainLabel.set_text("");
         }));
     }
diff --git a/files/usr/share/cinnamon/applets/sound@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/sound@cinnamon.org/applet.js
index deb71d4..c9f80d4 100644
--- a/files/usr/share/cinnamon/applets/sound@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/sound@cinnamon.org/applet.js
@@ -328,7 +328,7 @@ TextImageMenuItem.prototype = {
          let file = Gio.file_new_for_path(icon_file);
          let icon_uri = file.get_uri();
  
-         return St.TextureCache.get_default().load_uri_sync(1, icon_uri, 16, 16);
+         return St.TextureCache.get_default().load_uri_async(icon_uri, 16, 16);
     },
 }
 
diff --git a/files/usr/share/cinnamon/applets/systray@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/systray@cinnamon.org/applet.js
index a8ccef3..6ede694 100644
--- a/files/usr/share/cinnamon/applets/systray@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/systray@cinnamon.org/applet.js
@@ -50,6 +50,8 @@ MyApplet.prototype = {
             this._insertStatusItem(box, -1);
             
             let themeNode = buttonBox.actor.get_theme_node();
+            if (!themeNode.get_length('width')) icon.width = 22;
+            else icon.width = themeNode.get_length('width');
             if (!themeNode.get_length('height')) icon.height = 22;
             else icon.height = themeNode.get_length('height');
         }
diff --git a/files/usr/share/cinnamon/applets/window-list@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/window-list@cinnamon.org/applet.js
index 85b0a08..f10ee7c 100644
--- a/files/usr/share/cinnamon/applets/window-list@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/window-list@cinnamon.org/applet.js
@@ -224,8 +224,10 @@ AppMenuButton.prototype = {
         this._container.add_actor(this._label);
 
         this._iconBottomClip = 0;
-
-        this._visible = !Main.overview.visible;
+		if (!Main.overview.visible || !Main.expo.visible)
+        	this._visible = true;
+		else
+			this._visible = false;
         if (!this._visible)
             this.actor.hide();
         Main.overview.connect('hiding', Lang.bind(this, function () {
@@ -234,6 +236,12 @@ AppMenuButton.prototype = {
         Main.overview.connect('showing', Lang.bind(this, function () {
             this.hide();
         }));
+		Main.expo.connect('hiding', Lang.bind(this, function () {
+            this.show();
+        }));
+        Main.expo.connect('showing', Lang.bind(this, function () {
+            this.hide();
+        }));
         this.actor.connect('destroy', Lang.bind(this, this._onDestroy));
         
         this._updateCaptionId = this.metaWindow.connect('notify::title', Lang.bind(this, function () {
@@ -306,6 +314,7 @@ AppMenuButton.prototype = {
     _onDestroy: function() {
         this.metaWindow.disconnect(this._updateCaptionId);
         this._tooltip.destroy();
+        this.rightClickMenu.destroy();
     },
     
     doFocus: function() {
@@ -315,7 +324,7 @@ AppMenuButton.prototype = {
             let icon = app.create_icon_texture(16);
     		this._iconBox.set_child(icon);	
         }         
-        if (this.metaWindow.has_focus()) {                                     
+        if (this.metaWindow.has_focus() && !this.metaWindow.minimized) {                                     
         	this.actor.add_style_pseudo_class('focus');    
             this.actor.remove_style_class_name("window-list-item-demands-attention");    	
             this.actor.remove_style_class_name("window-list-item-demands-attention-top");
@@ -334,7 +343,6 @@ AppMenuButton.prototype = {
             this._windowHandle(false);
         } else if (Cinnamon.get_event_state(event) & Clutter.ModifierType.BUTTON2_MASK) {
             this.metaWindow.delete(global.get_current_time());
-            this.rightClickMenu.destroy();
         } else if (Cinnamon.get_event_state(event) & Clutter.ModifierType.BUTTON3_MASK) {
             this.rightClickMenu.mouseEvent = event;
             this.rightClickMenu.toggle();   
@@ -456,12 +464,12 @@ AppMenuButton.prototype = {
 
         let [minWidth, minHeight, naturalWidth, naturalHeight] = this._iconBox.get_preferred_size();
 
-        let direction = this.actor.get_direction();
+        let direction = this.actor.get_text_direction();
 
         let yPadding = Math.floor(Math.max(0, allocHeight - naturalHeight) / 2);
         childBox.y1 = yPadding;
         childBox.y2 = childBox.y1 + Math.min(naturalHeight, allocHeight);
-        if (direction == St.TextDirection.LTR) {
+        if (direction == Clutter.TextDirection.LTR) {
             childBox.x1 = 3;
             childBox.x2 = childBox.x1 + Math.min(naturalWidth, allocWidth);
         } else {
@@ -478,7 +486,7 @@ AppMenuButton.prototype = {
         childBox.y1 = yPadding;
         childBox.y2 = childBox.y1 + Math.min(naturalHeight, allocHeight);
 
-        if (direction == St.TextDirection.LTR) {
+        if (direction == Clutter.TextDirection.LTR) {
             childBox.x1 = Math.floor(iconWidth + 5);
             childBox.x2 = Math.min(childBox.x1 + naturalWidth, allocWidth);
         } else {
@@ -487,7 +495,7 @@ AppMenuButton.prototype = {
         }
         this._label.allocate(childBox, flags);
 
-        if (direction == St.TextDirection.LTR) {
+        if (direction == Clutter.TextDirection.LTR) {
             childBox.x1 = Math.floor(iconWidth / 2) + this._label.width;
             childBox.x2 = childBox.x1 + this._spinner.actor.width;
             childBox.y1 = box.y1;
@@ -591,6 +599,8 @@ MyAppletBox.prototype = {
         this._clearDragPlaceholder();
         actor.destroy();
         
+        this._applet.saveWindowsOrder();
+        
         return true;
     },
     
@@ -617,6 +627,8 @@ MyApplet.prototype = {
             this.orientation = orientation;
             this.dragInProgress = false;
             
+            this._windows_order = {};
+            
             this.myactorbox = new MyAppletBox(this);
             this.myactor = this.myactorbox.actor;
         
@@ -657,17 +669,17 @@ MyApplet.prototype = {
                                             
             Main.expo.connect('showing', Lang.bind(this, 
 	    					function(){	global.window_manager.disconnect(this.switchWorkspaceHandler);}));
-	    Main.expo.connect('hidden', Lang.bind(this, 
-						function(){	this.switchWorkspaceHandler=global.window_manager.connect('switch-workspace', 
+	    	Main.expo.connect('hidden', Lang.bind(this, 
+							function(){	this.switchWorkspaceHandler=global.window_manager.connect('switch-workspace', 
 												Lang.bind(this, this._refreshItems)); 
-								this._refreshItems();}));
+												this._refreshItems();}));
 
-	    Main.overview.connect('showing', Lang.bind(this, 
-						function(){	global.window_manager.disconnect(this.switchWorkspaceHandler);}));
-	    Main.overview.connect('hidden', Lang.bind(this, 
-						function(){	this.switchWorkspaceHandler=global.window_manager.connect('switch-workspace', 
+	    	Main.overview.connect('showing', Lang.bind(this, 
+							function(){	global.window_manager.disconnect(this.switchWorkspaceHandler);}));
+	    	Main.overview.connect('hidden', Lang.bind(this, 
+							function(){	this.switchWorkspaceHandler=global.window_manager.connect('switch-workspace', 
 												Lang.bind(this, this._refreshItems)); 
-								this._refreshItems();}));
+												this._refreshItems();}));
             
             this._workspaces = [];
             this._changeWorkspaces();
@@ -684,6 +696,13 @@ MyApplet.prototype = {
         }
     },
     
+    saveWindowsOrder: function() {
+        let order = [];
+        let children = this.myactor.get_children();
+        for (var i in children) if (children[i]._delegate && children[i]._delegate.metaWindow) order.push(children[i]._delegate.metaWindow);
+        this._windows_order[global.screen.get_active_workspace()] = order;
+    },
+    
     on_applet_clicked: function(event) {
             
     },        
@@ -713,9 +732,18 @@ MyApplet.prototype = {
 
         let metaWorkspace = global.screen.get_active_workspace();
         let windows = metaWorkspace.list_windows();
-        windows.sort(function(w1, w2) {
-            return w1.get_stable_sequence() - w2.get_stable_sequence();
-        });
+        windows.sort(Lang.bind(this, function(w1, w2) {
+            if (this._windows_order){
+                let order = this._windows_order[metaWorkspace];
+                if (order){
+                    let iw1 = order.indexOf(w1);
+                    let iw2 = order.indexOf(w2);
+                    if (iw1==-1) return 1;
+                    else if (iw2==-1) return -1;
+                    else return iw1 - iw2;
+                }else return w1.get_stable_sequence() - w2.get_stable_sequence;
+            }else return w1.get_stable_sequence() - w2.get_stable_sequence;
+        }));
                 
         // Create list items for each window
         let tracker = Cinnamon.WindowTracker.get_default();
@@ -848,7 +876,7 @@ MyApplet.prototype = {
 
 		childBox.y1 = 0;
 		childBox.y2 = allocHeight;
-		if (this.myactor.get_direction() == St.TextDirection.RTL) {
+		if (this.myactor.get_text_direction() == Clutter.TextDirection.RTL) {
 			childBox.x1 = allocWidth - Math.min(allocWidth - rightNaturalWidth,
 												leftNaturalWidth);
 			childBox.x2 = allocWidth;
@@ -866,7 +894,7 @@ MyApplet.prototype = {
 
 		childBox.y1 = 0;
 		childBox.y2 = allocHeight;
-		if (this.myactor.get_direction() == St.TextDirection.RTL) {
+		if (this.myactor.get_text_direction() == Clutter.TextDirection.RTL) {
 			childBox.x1 = 0;
 			childBox.x2 = Math.min(Math.floor(sideWidth),
 								   rightNaturalWidth);
diff --git a/js/ui/altTab.js b/js/ui/altTab.js
index 6886c8c..fc3121a 100644
--- a/js/ui/altTab.js
+++ b/js/ui/altTab.js
@@ -197,7 +197,7 @@ AltTabPopup.prototype = {
         this.actor.get_allocation_box();
 
         // Make the initial selection
-        if (binding == 'switch_group') {
+        if (binding == 'switch-group') {
             if (backward) {
                 this._select(0, this._appIcons[0].cachedWindows.length - 1);
             } else {
@@ -206,9 +206,9 @@ AltTabPopup.prototype = {
                 else
                     this._select(0, 0);
             }
-        } else if (binding == 'switch_group_backward') {
+        } else if (binding == 'switch-group-backward') {
             this._select(0, this._appIcons[0].cachedWindows.length - 1);
-        } else if (binding == 'switch_windows_backward') {
+        } else if (binding == 'switch-windows-backward') {
             this._select(this._appIcons.length - 1);
         } else if (this._appIcons.length == 1) {
             this._select(0);
diff --git a/js/ui/applet.js b/js/ui/applet.js
index f8d2bc5..9bda45c 100644
--- a/js/ui/applet.js
+++ b/js/ui/applet.js
@@ -222,7 +222,7 @@ IconApplet.prototype = {
         if (icon_path){
             let file = Gio.file_new_for_path(icon_path);
             let icon_uri = file.get_uri();
-            this._applet_icon = St.TextureCache.get_default().load_uri_sync(1, icon_uri, 22, 22);
+            this._applet_icon = St.TextureCache.get_default().load_uri_async(icon_uri, 22, 22);
             this._applet_icon_box.child = this._applet_icon;
         }
     },
diff --git a/js/ui/expo.js b/js/ui/expo.js
index 3905d3f..9eb7be0 100644
--- a/js/ui/expo.js
+++ b/js/ui/expo.js
@@ -8,6 +8,7 @@ const St = imports.gi.St;
 const Cinnamon = imports.gi.Cinnamon;
 const Gdk = imports.gi.Gdk;
 
+const DND = imports.ui.dnd;
 const Main = imports.ui.main;
 const MessageTray = imports.ui.messageTray;
 const Params = imports.misc.params;
@@ -118,7 +119,7 @@ Expo.prototype = {
 
         this.visible = false;           // animating to overview, in overview, animating out
         this._shown = false;            // show() and not hide()
-        this._shownTemporarily = false; // showTemporarily() and not hideTemporarily()
+        this._shownTemporarily = false; // showTemporarily() and not hilog("huasuhashusu");deTemporarily()
         this._modal = false;            // have a modal grab
         this.animationInProgress = false;
         this._hideInProgress = false;
@@ -128,7 +129,7 @@ Expo.prototype = {
         // Dash elements, or mouseover handlers in the workspaces.
 
         this._gradient = new St.Button({reactive: false});
-        this._gradient.set_style("background-gradient-end: #AAA;background-gradient-start: #000;background-gradient-direction: vertical;");
+        this._gradient.set_style_class_name("expo-background");
         this._group.add_actor(this._gradient);
         this._coverPane = new Clutter.Rectangle({ opacity: 0,
                                                   reactive: true });
@@ -137,18 +138,28 @@ Expo.prototype = {
 
         this._addWorkspaceButton = new St.Button({style_class: 'workspace-add-button'});
         this._group.add_actor(this._addWorkspaceButton);
-        this._addWorkspaceButton.opacity = 160;
         this._addWorkspaceButton.connect('clicked', Lang.bind(this, function () { Main._addWorkspace();}));
-        this._addWorkspaceButton.connect('enter-event', Lang.bind(this, function () { 
-                Tweener.addTween(this._addWorkspaceButton, { opacity: 255,
-                                                             time: ADD_BUTTON_HOVER_TIME,
-                                                             transition: 'easeOutQuad'});
-                                                                                        }));
-        this._addWorkspaceButton.connect('leave-event', Lang.bind(this, function () { 
-                Tweener.addTween(this._addWorkspaceButton, { opacity: 160,
-                                                             time: ADD_BUTTON_HOVER_TIME,
-                                                             transition: 'easeOutQuad'});
-                                                                                        }));
+
+        this._windowCloseArea = new St.Button({style_class: 'window-close-area'});
+        this._windowCloseArea.handleDragOver = function(source, actor, x, y, time) {
+                return DND.DragMotionResult.MOVE_DROP;
+            };
+        this._windowCloseArea.acceptDrop = function(source, actor, x, y, time) {
+                
+                if (source.realWindow) {
+                    let win = source.realWindow;
+
+                    let metaWindow = win.get_meta_window();
+                    
+                    source._draggable._restoreOnSuccess = false;
+                    metaWindow.delete(global.get_current_time());
+                    return true;
+                }
+                return false;
+            };
+
+        this._windowCloseArea._delegate = this._windowCloseArea;
+        this._group.add_actor(this._windowCloseArea);
 
         this._group.hide();
         global.overlay_group.add_actor(this._group);
@@ -156,6 +167,7 @@ Expo.prototype = {
         this._gradient.hide();
         this._coverPane.hide();
         this._addWorkspaceButton.hide();
+        this._windowCloseArea.hide();
 
         this._windowSwitchTimeoutId = 0;
         this._windowSwitchTimestamp = 0;
@@ -213,6 +225,8 @@ Expo.prototype = {
         this._group.set_position(primary.x, primary.y);
         this._group.set_size(primary.width, primary.height);
 
+        this._group.set_clip(primary.x, primary.y, primary.width, primary.height);
+
         this._gradient.set_position(0, 0);
         this._gradient.set_size(primary.width, primary.height);
 
@@ -228,6 +242,10 @@ Expo.prototype = {
         let buttonWidth = node.get_length('width');
         let buttonHeight = node.get_length('height');
 
+        node = this._windowCloseArea.get_theme_node();
+        this._windowCloseArea.height = node.get_length('height');
+        this._windowCloseArea.width = node.get_length('width');
+
         this._expo.actor.set_position(0, 0);
         this._expo.actor.set_size((primary.width - buttonWidth), primary.height);
 
@@ -237,6 +255,26 @@ Expo.prototype = {
         this._addWorkspaceButton.set_size(buttonWidth, buttonHeight); 
         if (this._addWorkspaceButton.get_theme_node().get_background_image() == null)
             this._addWorkspaceButton.set_style('background-image: url("/usr/share/cinnamon/theme/add-workspace.png");'); 
+
+        this._windowCloseArea.set_position((primary.width - this._windowCloseArea.width) / 2 , primary.height);
+        this._windowCloseArea.set_size(this._windowCloseArea.width, this._windowCloseArea.height);
+        this._windowCloseArea.raise_top();
+    },
+
+    showCloseArea : function() {
+        let primary = Main.layoutManager.primaryMonitor;
+        this._windowCloseArea.show();
+        Tweener.addTween(this._windowCloseArea, {   y: primary.height - this._windowCloseArea.height,
+                                                    time: ANIMATION_TIME,
+                                                    transition: 'easeOutQuad'});
+    },
+
+    hideCloseArea : function() {
+        let primary = Main.layoutManager.primaryMonitor;
+        Tweener.addTween(this._windowCloseArea, {   y: primary.height,
+                                                    time: ANIMATION_TIME,
+                                                    transition: 'easeOutQuad',
+                                                    onComplete: this.hide});
     },
 
     //// Public methods ////
@@ -521,6 +559,7 @@ Expo.prototype = {
 
         this._expo.hide();
         this._addWorkspaceButton.hide();
+        this._windowCloseArea.hide();
 
         this._background.hide();
         this._group.hide();
@@ -549,4 +588,4 @@ Expo.prototype = {
         Main.layoutManager._chrome.updateRegions();
     }
 };
-Signals.addSignalMethods(Expo.prototype);
\ No newline at end of file
+Signals.addSignalMethods(Expo.prototype);
diff --git a/js/ui/expoThumbnail.js b/js/ui/expoThumbnail.js
index 6ed4b04..2ebf792 100644
--- a/js/ui/expoThumbnail.js
+++ b/js/ui/expoThumbnail.js
@@ -109,11 +109,13 @@ ExpoWindowClone.prototype = {
     },
 
     _onDragBegin : function (draggable, time) {
+        Main.expo.showCloseArea();
         this.inDrag = true;
         this.emit('drag-begin');
     },
 
     _onDragEnd : function (draggable, time, snapback) {
+        Main.expo.hideCloseArea();
         this.inDrag = false;
         // We may not have a parent if DnD completed successfully, in
         // which case our clone will shortly be destroyed and replaced
@@ -201,11 +203,12 @@ ExpoWorkspaceThumbnail.prototype = {
         let windows = global.get_window_actors().filter(this._isMyWindow, this);
 
         // Create clones for windows that should be visible in the Expo
+        this.count = 0;
         this._windows = [];
         this._uninterestingWindows = new Clutter.Group();
         this._uninterestingWindows.hide();
-        this._uninterestingWindows.raise(this._background);
         this._contents.add_actor(this._uninterestingWindows);
+        this._uninterestingWindows.raise(this._background);
         for (let i = 0; i < windows.length; i++) {
             windows[i].meta_window._minimizedChangedId =
                 windows[i].meta_window.connect('notify::minimized',
@@ -392,6 +395,7 @@ ExpoWorkspaceThumbnail.prototype = {
                 metaWin.disconnect(metaWin._minimizedChangedId);
                 delete metaWin._minimizedChangedId;
             }
+            this._windows[i].destroy();
         }
 
         this._windows = [];
@@ -461,7 +465,7 @@ ExpoWorkspaceThumbnail.prototype = {
 
     _addUninterestingWindowClone : function(win) {
         let clone = new ExpoWindowClone(win);
-        this._uninterestingWindows.add_actor(clone.actor)
+        this._uninterestingWindows.add_actor(clone.actor);
         return clone;
     },
 
@@ -747,6 +751,8 @@ ExpoThumbnailsBox.prototype = {
             thumbnail.actor.connect('leave-event', Lang.bind(this, function () { this.button.hide(); if (thumbnail.metaWorkspace != global.screen.get_active_workspace()) thumbnail._shade(); thumbnail.hovered = false; thumbnail._overviewModeOff();}));
             thumbnail.connect('remove-event', Lang.bind(this, function () { this.button.hide(); if (thumbnail.metaWorkspace != global.screen.get_active_workspace()) thumbnail._shade(); thumbnail.hovered = false; thumbnail._overviewModeOff();}));
 
+            Main.expo.connect('hiding', Lang.bind(this, function() { this.button.hide();}));
+
             if (start > 0) { // not the initial fill
                 thumbnail.state = ThumbnailState.NEW;
                 thumbnail.slidePosition = 1; // start slid out
@@ -1072,4 +1078,4 @@ ExpoThumbnailsBox.prototype = {
         if (thumbnail.shade.opacity > 0)
             thumbnail._highlight();
     }
-};
\ No newline at end of file
+};
diff --git a/js/ui/keyboard.js b/js/ui/keyboard.js
index b8d5cb3..f30c2e5 100644
--- a/js/ui/keyboard.js
+++ b/js/ui/keyboard.js
@@ -337,6 +337,15 @@ Keyboard.prototype = {
             trayButton.remove_style_pseudo_class('grayed');
         }));
 
+        Main.expo.connect('showing', Lang.bind(this, function () {
+            trayButton.reactive = false;
+            trayButton.add_style_pseudo_class('grayed');
+        }));
+        Main.expo.connect('hiding', Lang.bind(this, function () {
+            trayButton.reactive = true;
+            trayButton.remove_style_pseudo_class('grayed');
+        }));
+
         return trayButton;
     },
 
diff --git a/js/ui/layout.js b/js/ui/layout.js
index e34a130..f28dd64 100644
--- a/js/ui/layout.js
+++ b/js/ui/layout.js
@@ -30,7 +30,6 @@ LayoutManager.prototype = {
         this._rightPanelBarrier = 0;
         this._leftPanelBarrier2 = 0;
         this._rightPanelBarrier2 = 0;
-        this._trayBarrier = 0;		
         this._chrome = new Chrome(this);       
 		
 		this._hotCorner = new HotCorner();        
@@ -38,11 +37,6 @@ LayoutManager.prototype = {
 		this.addChrome(this.overviewCorner, { visibleInFullscreen: false });	
 		this.overviewCorner.connect('button-release-event', Lang.bind(this, this._toggleExpo));
 		
-        this.trayBox = new St.BoxLayout({ name: 'trayBox' }); 
-        this.addChrome(this.trayBox, { visibleInFullscreen: true });
-        this.trayBox.connect('allocation-changed',
-                             Lang.bind(this, this._updateTrayBarrier));
-                             
         this.panelBox = new St.BoxLayout({ name: 'panelBox',
                                            vertical: true });
                                            
@@ -281,17 +275,6 @@ LayoutManager.prototype = {
         this.keyboardBox.set_position(this.bottomMonitor.x,
                                       this.bottomMonitor.y + this.bottomMonitor.height);
         this.keyboardBox.set_size(this.bottomMonitor.width, -1);
-
-        this.trayBox.set_position(this.primaryMonitor.x,
-                                  this.primaryMonitor.y + 25);
-        this.trayBox.set_size(this.primaryMonitor.width, -1);
-
-        // Set trayBox's clip to show things above it, but not below
-        // it (so it's not visible behind the keyboard). The exact
-        // height of the clip doesn't matter, as long as it's taller
-        // than any Notification.actor.
-        this.trayBox.set_clip(0, -this.bottomMonitor.height,
-                              this.bottomMonitor.width, this.bottomMonitor.height);
     },
 
     _updatePanelBarriers: function(panelBox) {
@@ -347,22 +330,6 @@ LayoutManager.prototype = {
         }
     },
 
-    _updateTrayBarrier: function() {
-        let monitor = this.primaryMonitor;
-
-        if (this._trayBarrier)
-            global.destroy_pointer_barrier(this._trayBarrier);
-
-        //if (Main.messageTray && Main.messageTray.actor) {
-        //    this._trayBarrier =
-        //        global.create_pointer_barrier(monitor.x + monitor.width, monitor.y,
-        //                                      monitor.x + monitor.width, monitor.y + Main.messageTray.actor.height,
-        //                                      4 /* BarrierNegativeX */);
-        //} else {
-            this._trayBarrier = 0;
-        //}
-    },
-
     _monitorsChanged: function() {
         this._updateMonitors();
         this._updateBoxes();
@@ -443,11 +410,6 @@ LayoutManager.prototype = {
                            onComplete: this._showKeyboardComplete,
                            onCompleteScope: this
                          });
-        Tweener.addTween(this.trayBox,
-                         { anchor_y: this.keyboardBox.height,
-                           time: KEYBOARD_ANIMATION_TIME,
-                           transition: 'easeOutQuad'
-                         });
     },
 
     _showKeyboardComplete: function() {
@@ -457,7 +419,6 @@ LayoutManager.prototype = {
 
         this._keyboardHeightNotifyId = this.keyboardBox.connect('notify::height', Lang.bind(this, function () {
             this.keyboardBox.anchor_y = this.keyboardBox.height;
-            this.trayBox.anchor_y = this.keyboardBox.height;
         }));
     },
 
@@ -474,11 +435,6 @@ LayoutManager.prototype = {
                            onComplete: this._hideKeyboardComplete,
                            onCompleteScope: this
                          });
-        Tweener.addTween(this.trayBox,
-                         { anchor_y: 0,
-                           time: immediate ? 0 : KEYBOARD_ANIMATION_TIME,
-                           transition: 'easeOutQuad'
-                         });
     },
 
     _hideKeyboardComplete: function() {
diff --git a/js/ui/magnifier.js b/js/ui/magnifier.js
index be60ce5..ce7566b 100644
--- a/js/ui/magnifier.js
+++ b/js/ui/magnifier.js
@@ -61,7 +61,7 @@ Magnifier.prototype = {
         this._zoomRegions = [];
 
         // Create small clutter tree for the magnified mouse.
-        let xfixesCursor = Cinnamon.XFixesCursor.get_default();
+        let xfixesCursor = Cinnamon.XFixesCursor.get_for_stage(global.stage);
         this._mouseSprite = new Clutter.Texture();
         xfixesCursor.update_texture_image(this._mouseSprite);
         this._cursorRoot = new Clutter.Group();
@@ -604,6 +604,7 @@ ZoomRegion.prototype = {
             this._updateMagViewGeometry();
             this._updateCloneGeometry();
             this._updateMousePosition();
+            global.top_window_group.raise_top();
         } else if (!activate && this.isActive()) {
             this._destroyActors();
         }
diff --git a/js/ui/main.js b/js/ui/main.js
index cab654f..7791f6b 100644
--- a/js/ui/main.js
+++ b/js/ui/main.js
@@ -4,7 +4,6 @@ const Clutter = imports.gi.Clutter;
 const DBus = imports.dbus;
 const Gio = imports.gi.Gio;
 const GLib = imports.gi.GLib;
-const GConf = imports.gi.GConf;
 const Mainloop = imports.mainloop;
 const Meta = imports.gi.Meta;
 const Cinnamon = imports.gi.Cinnamon;
@@ -145,15 +144,11 @@ function _initUserSession() {
     ExtensionSystem.init();
     ExtensionSystem.loadExtensions();
 
-    let cinnamonwm = global.window_manager;
-
-    cinnamonwm.takeover_keybinding('panel_run_dialog');
-    cinnamonwm.connect('keybinding::panel_run_dialog', function () {
+    Meta.keybindings_set_custom_handler('panel-run-dialog', function() {
        getRunDialog().open();
     });
 
-    cinnamonwm.takeover_keybinding('panel_main_menu');
-    cinnamonwm.connect('keybinding::panel_main_menu', function () {
+    Meta.keybindings_set_custom_handler('panel-main-menu', function () {
         expo.toggle();
     });
     
@@ -660,16 +655,6 @@ function _globalKeyPressHandler(actor, event) {
     // This relies on the fact that Clutter.ModifierType is the same as Gdk.ModifierType
     let action = global.display.get_keybinding_action(keyCode, modifierState);
 
-    // The screenshot action should always be available (even if a
-    // modal dialog is present)
-    if (action == Meta.KeyBindingAction.COMMAND_SCREENSHOT) {
-        let gconf = GConf.Client.get_default();
-        let command = gconf.get_string('/apps/metacity/keybinding_commands/command_screenshot');
-        if (command != null && command != '')
-            Util.spawnCommandLine(command);
-        return true;
-    }
-
     // Other bindings are only available to the user session when the overview is up and
     // no modal dialog is present.
     if (global.session_type == Cinnamon.SessionType.USER && ((!overview.visible && !expo.visible) || modalCount > 1))
diff --git a/js/ui/messageTray.js b/js/ui/messageTray.js
index 09ec320..5d09dbe 100644
--- a/js/ui/messageTray.js
+++ b/js/ui/messageTray.js
@@ -241,6 +241,14 @@ FocusGrabber.prototype = {
             function() {
                 this._toggleFocusGrabMode();
             }));
+        Main.expo.connect('showing', Lang.bind(this,
+            function() {
+                this._toggleFocusGrabMode();
+            }));
+        Main.expo.connect('hidden', Lang.bind(this,
+            function() {
+                this._toggleFocusGrabMode();
+            }));
     },
 
     grabFocus: function(actor) {
@@ -1363,7 +1371,10 @@ MessageTray.prototype = {
         this._notificationState = State.HIDDEN;
         this._notificationTimeoutId = 0;
         this._notificationExpandedId = 0;
-        this._overviewVisible = Main.overview.visible;
+        if (Main.overview.visible || Main.expo.visible)
+            this._overviewVisible = true;
+        else
+            this._overviewVisible = false;
         this._notificationRemoved = false;
         this._reNotifyAfterHideNotification = null;
         
@@ -1392,6 +1403,25 @@ MessageTray.prototype = {
                     this._updateState();
                 }
             }));
+
+        Main.expo.connect('showing', Lang.bind(this,
+            function() {
+                this._overviewVisible = true;
+                if (this._locked) {
+                    this._unlock();
+                } else {
+                    this._updateState();
+                }
+            }));
+        Main.expo.connect('hiding', Lang.bind(this,
+            function() {
+                this._overviewVisible = false;
+                if (this._locked) {
+                    this._unlock();
+                } else {
+                    this._updateState();
+                }
+            }));
     },
 
     _setSizePosition: function() {
@@ -1571,9 +1601,9 @@ MessageTray.prototype = {
         this._notificationBin.child = this._notification.actor;
         this._notificationBin.opacity = 0;        
         let monitor = Main.layoutManager.primaryMonitor;
-        this._notificationBin.y = this._notification._table.get_theme_node().get_length('margin-from-top-edge-of-screen') * 2; // Notifications appear from here (for the animation)
+        this._notificationBin.y = monitor.y + this._notification._table.get_theme_node().get_length('margin-from-top-edge-of-screen') * 2; // Notifications appear from here (for the animation)
         let margin = this._notification._table.get_theme_node().get_length('margin-from-right-edge-of-screen');                
-        this._notificationBin.x = monitor.width - this._notification._table.width - margin;
+        this._notificationBin.x = monitor.x + monitor.width - this._notification._table.width - margin;
         this._notificationBin.show();
 
         this._updateShowingNotification();
@@ -1624,8 +1654,9 @@ MessageTray.prototype = {
                             onComplete: this._showNotificationCompleted,
                             onCompleteScope: this
                           };
+        let monitor = Main.layoutManager.primaryMonitor;
         if (!this._notification.expanded)        	 
-            tweenParams.y = this._notification._table.get_theme_node().get_length('margin-from-top-edge-of-screen');             
+            tweenParams.y = monitor.y + this._notification._table.get_theme_node().get_length('margin-from-top-edge-of-screen');             
 
         this._tween(this._notificationBin, '_notificationState', State.SHOWN, tweenParams);
    },
@@ -1671,7 +1702,7 @@ MessageTray.prototype = {
         }
 
         this._tween(this._notificationBin, '_notificationState', State.HIDDEN,
-                    { y: 0,
+                    { y: Main.layoutManager.primaryMonitor.y,
                       opacity: 0,
                       time: ANIMATION_TIME,
                       transition: 'easeOutQuad',
diff --git a/js/ui/panel.js b/js/ui/panel.js
index f7b9e97..e3790ff 100644
--- a/js/ui/panel.js
+++ b/js/ui/panel.js
@@ -8,16 +8,12 @@ const Pango = imports.gi.Pango;
 const Cinnamon = imports.gi.Cinnamon;
 const St = imports.gi.St;
 const PopupMenu = imports.ui.popupMenu;
-const PanelMenu = imports.ui.panelMenu;
 const Main = imports.ui.main;
 const Tweener = imports.ui.tweener;
 const Applet = imports.ui.applet;
 const DND = imports.ui.dnd;
 const AppletManager = imports.ui.appletManager;
 
-const PANEL_ICON_SIZE = 24;
-const PANEL_ICON_DEFAULT_SIZE = 22;
-
 const BUTTON_DND_ACTIVATION_TIMEOUT = 250;
 
 const ANIMATED_ICON_UPDATE_TIMEOUT = 100;
@@ -144,12 +140,6 @@ TextShadower.prototype = {
         this._label.raise_top();
     },
 
-    setText: function(text) {
-        let children = this.actor.get_children();
-        for (let i = 0; i < children.length; i++)
-            children[i].set_text(text);
-    },
-
     _getPreferredWidth: function(actor, forHeight, alloc) {
         let [minWidth, natWidth] = this._label.get_preferred_width(forHeight);
         alloc.min_size = minWidth + 2;
@@ -514,10 +504,6 @@ Panel.prototype = {
                                                   reactive: true });
         this.actor._delegate = this;
 
-        
-
-        this._statusArea = {};
-
         Main.overview.connect('shown', Lang.bind(this, function () {
             this.actor.add_style_class_name('in-overview');
         }));
@@ -525,6 +511,13 @@ Panel.prototype = {
             this.actor.remove_style_class_name('in-overview');
         }));
 
+        Main.expo.connect('shown', Lang.bind(this, function () {
+            this.actor.add_style_class_name('in-overview');
+        }));
+        Main.expo.connect('hiding', Lang.bind(this, function () {
+            this.actor.remove_style_class_name('in-overview');
+        }));
+
         this._menus = new PopupMenu.PopupMenuManager(this);                        
         
         this._leftBox = new St.BoxLayout({ name: 'panelLeft' });
@@ -563,9 +556,6 @@ Panel.prototype = {
             this._status_area_order = STANDARD_STATUS_AREA_ORDER;
             this._status_area_cinnamon_implementation = STANDARD_STATUS_AREA_CINNAMON_IMPLEMENTATION;
         }
-
-        //Main.statusIconDispatcher.connect('status-icon-added', Lang.bind(this, this._onTrayIconAdded));
-        //Main.statusIconDispatcher.connect('status-icon-removed', Lang.bind(this, this._onTrayIconRemoved));        
                                         
         this.actor.connect('leave-event', Lang.bind(this, this._leavePanel));
         this.actor.connect('enter-event', Lang.bind(this, this._enterPanel));  
@@ -703,90 +693,6 @@ Panel.prototype = {
         this._rightCorner.actor.allocate(childBox, flags);
     },
 
-    startStatusArea: function() {
-        for (let i = 0; i < this._status_area_order.length; i++) {
-            let role = this._status_area_order[i];
-            let constructor = this._status_area_cinnamon_implementation[role];
-            if (!constructor) {
-                // This icon is not implemented (this is a bug)
-                continue;
-            }
-
-            let indicator = new constructor();
-            this.addToStatusArea(role, indicator, i);
-        }
-    },
-
-    _insertStatusItem: function(actor, position) {
-        let children = this._rightBox.get_children();
-        let i;
-        for (i = children.length - 1; i >= 0; i--) {
-            let rolePosition = children[i]._rolePosition;
-            if (position > rolePosition) {
-                this._rightBox.insert_actor(actor, i + 1);
-                break;
-            }
-        }
-        if (i == -1) {
-            // If we didn't find a position, we must be first
-            this._rightBox.insert_actor(actor, 0);
-        }
-        actor._rolePosition = position;
-    },
-
-    addToStatusArea: function(role, indicator, position) {
-        if (this._statusArea[role])
-            throw new Error('Extension point conflict: there is already a status indicator for role ' + role);
-
-        if (!(indicator instanceof PanelMenu.Button))
-            throw new TypeError('Status indicator must be an instance of PanelMenu.Button');
-
-        if (!position)
-            position = 0;
-        this._insertStatusItem(indicator.actor, position);
-        this._menus.addMenu(indicator.menu);
-
-        this._statusArea[role] = indicator;
-        let destroyId = indicator.connect('destroy', Lang.bind(this, function(emitter) {
-            this._statusArea[role] = null;
-            emitter.disconnect(destroyId);
-        }));
-
-        return indicator;
-    },
-
-    _onTrayIconAdded: function(o, icon, role) {
-        if (this._status_area_cinnamon_implementation[role]) {
-            // This icon is legacy, and replaced by a Cinnamon version
-            // Hide it
-            return;
-        }
-        
-        let hiddenIcons = ["network", "power", "keyboard", "gnome-settings-daemon", "volume", "bluetooth", "battery", "a11y"];
-        
-        if (hiddenIcons.indexOf(role) != -1 ) {  
-            // We've got an applet for that          
-            return;
-        }
-
-        //icon.height = PANEL_ICON_SIZE;        
-        let buttonBox = new PanelMenu.ButtonBox({ style_class: 'panel-status-button' });
-        let box = buttonBox.actor;
-        box.add_actor(icon);
-
-        this._insertStatusItem(box, this._status_area_order.indexOf(role));
-        
-        let themeNode = buttonBox.actor.get_theme_node();
-        if (!themeNode.get_length('height')) icon.height = PANEL_ICON_DEFAULT_SIZE;
-        else icon.height = themeNode.get_length('height');
-    },
-
-    _onTrayIconRemoved: function(o, icon) {
-        let box = icon.get_parent();
-        if (box && box._delegate instanceof PanelMenu.ButtonBox)
-            box.destroy();
-    },
-    
     _enterPanel: function() {
         this.isMouseOverPanel = true;
         this._showPanel();
diff --git a/js/ui/tooltips.js b/js/ui/tooltips.js
index 34a56c0..594bb4f 100644
--- a/js/ui/tooltips.js
+++ b/js/ui/tooltips.js
@@ -9,9 +9,10 @@ function PanelItemTooltip(panelItem, initTitle, orientation) {
 
 PanelItemTooltip.prototype = {
     _init: function(panelItem, initTitle, orientation) {
-        this._tooltip = new St.Tooltip();
+        this._tooltip = new St.Label({ name: 'Tooltip' });
+        this._tooltip.show_on_set_parent = false;
         this.orientation = orientation;
-        if (initTitle) this._tooltip.set_label(initTitle);
+        if (initTitle) this._tooltip.set_text(initTitle);
         Main.uiGroup.add_actor(this._tooltip);
         
         panelItem.actor.connect('enter-event', Lang.bind(this, this._onEnterEvent));
@@ -40,7 +41,7 @@ PanelItemTooltip.prototype = {
     },
     
     _onTimerComplete: function(){
-        if (this._tooltip.get_label() != "") {
+        if (this._tooltip.get_text() != "") {
             this.show();
         }
     },
@@ -90,7 +91,7 @@ PanelItemTooltip.prototype = {
     },
     
     set_text: function(text) {
-        this._tooltip.set_label(text);
+        this._tooltip.set_text(text);
     },
     
     destroy: function() {
diff --git a/js/ui/windowManager.js b/js/ui/windowManager.js
index 200b39a..0d5a000 100644
--- a/js/ui/windowManager.js
+++ b/js/ui/windowManager.js
@@ -89,7 +89,6 @@ WindowManager.prototype = {
     _init : function() {
         this._cinnamonwm =  global.window_manager;
 
-        this._keyBindingHandlers = [];
         this._minimizing = [];
         this._maximizing = [];
         this._unmaximizing = [];
@@ -117,15 +116,24 @@ WindowManager.prototype = {
         this._cinnamonwm.connect('map', Lang.bind(this, this._mapWindow));
         this._cinnamonwm.connect('destroy', Lang.bind(this, this._destroyWindow));
         
-        this.setKeybindingHandler('switch_to_workspace_left', Lang.bind(this, this._showWorkspaceSwitcher));
-        this.setKeybindingHandler('switch_to_workspace_right', Lang.bind(this, this._showWorkspaceSwitcher));
-        this.setKeybindingHandler('switch_to_workspace_up', Lang.bind(this, this._showWorkspaceSwitcher));
-        this.setKeybindingHandler('switch_to_workspace_down', Lang.bind(this, this._showWorkspaceSwitcher));
-        this.setKeybindingHandler('switch_windows', Lang.bind(this, this._startAppSwitcher));
-        this.setKeybindingHandler('switch_group', Lang.bind(this, this._startAppSwitcher));
-        this.setKeybindingHandler('switch_windows_backward', Lang.bind(this, this._startAppSwitcher));
-        this.setKeybindingHandler('switch_group_backward', Lang.bind(this, this._startAppSwitcher));
-        this.setKeybindingHandler('switch_panels', Lang.bind(this, this._startA11ySwitcher));
+        Meta.keybindings_set_custom_handler('switch-to-workspace-left',
+                                            Lang.bind(this, this._showWorkspaceSwitcher));
+        Meta.keybindings_set_custom_handler('switch-to-workspace-right',
+                                            Lang.bind(this, this._showWorkspaceSwitcher));
+        Meta.keybindings_set_custom_handler('switch-to-workspace-up',
+                                            Lang.bind(this, this._showWorkspaceSwitcher));
+        Meta.keybindings_set_custom_handler('switch-to-workspace-down',
+                                            Lang.bind(this, this._showWorkspaceSwitcher));
+        Meta.keybindings_set_custom_handler('switch-windows',
+                                            Lang.bind(this, this._startAppSwitcher));
+        Meta.keybindings_set_custom_handler('switch-group',
+                                            Lang.bind(this, this._startAppSwitcher));
+        Meta.keybindings_set_custom_handler('switch-windows-backward',
+                                            Lang.bind(this, this._startAppSwitcher));
+        Meta.keybindings_set_custom_handler('switch-group-backward',
+                                            Lang.bind(this, this._startAppSwitcher));
+        Meta.keybindings_set_custom_handler('switch-panels',
+                                            Lang.bind(this, this._startA11ySwitcher));
 
         Main.overview.connect('showing', Lang.bind(this, function() {
             for (let i = 0; i < this._dimmedWindows.length; i++)
@@ -137,16 +145,6 @@ WindowManager.prototype = {
         }));
     },
 
-    setKeybindingHandler: function(keybinding, handler){
-        if (this._keyBindingHandlers[keybinding])
-            this._cinnamonwm.disconnect(this._keyBindingHandlers[keybinding]);
-        else
-            this._cinnamonwm.takeover_keybinding(keybinding);
-
-        this._keyBindingHandlers[keybinding] =
-            this._cinnamonwm.connect('keybinding::' + keybinding, handler);
-    },
-
     blockAnimations: function() {
         this._animationBlockCount++;
     },
@@ -738,34 +736,36 @@ WindowManager.prototype = {
         cinnamonwm.completed_switch_workspace();
     },
 
-    _startAppSwitcher : function(cinnamonwm, binding, mask, window, backwards) {
+    _startAppSwitcher : function(display, screen, window, binding) {
         
         let tabPopup = new AltTab.AltTabPopup();
 
-        if (!tabPopup.show(backwards, binding, mask))
+        let modifiers = binding.get_modifiers();
+        let backwards = modifiers & Meta.VirtualModifier.SHIFT_MASK;
+        if (!tabPopup.show(backwards, binding.get_name(), binding.get_mask()))
             tabPopup.destroy();
     },
 
-    _startA11ySwitcher : function(cinnamonwm, binding, mask, window, backwards) {
+    _startA11ySwitcher : function(display, screen, window, binding) {
         
     },
 
-    _showWorkspaceSwitcher : function(cinnamonwm, binding, mask, window, backwards) {
-        if (binding == 'switch_to_workspace_up') {
+    _showWorkspaceSwitcher : function(display, screen, window, binding) {
+        if (binding.get_name() == 'switch-to-workspace-up') {
         	Main.expo.toggle();
         	return;                   
         }
-        if (binding == 'switch_to_workspace_down') {
+        if (binding.get_name() == 'switch-to-workspace-down') {
             Main.overview.toggle();
             return;
         }
         
-        if (global.screen.n_workspaces == 1)
+        if (screen.n_workspaces == 1)
             return;
 
-        if (binding == 'switch_to_workspace_left')
+        if (binding.get_name() == 'switch-to-workspace-left')
            this.actionMoveWorkspaceLeft();
-        else if (binding == 'switch_to_workspace_right')
+        else if (binding.get_name() == 'switch-to-workspace-right')
            this.actionMoveWorkspaceRight();
     },
 
diff --git a/js/ui/workspace.js b/js/ui/workspace.js
index e769678..58e93ee 100644
--- a/js/ui/workspace.js
+++ b/js/ui/workspace.js
@@ -1,7 +1,7 @@
 // -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*-
 
 const Clutter = imports.gi.Clutter;
-const GConf = imports.gi.GConf;
+const Gio = imports.gi.Gio;
 const Lang = imports.lang;
 const Mainloop = imports.mainloop;
 const Meta = imports.gi.Meta;
@@ -27,7 +27,8 @@ const CLOSE_BUTTON_FADE_TIME = 0.1;
 
 const DRAGGING_WINDOW_OPACITY = 100;
 
-const BUTTON_LAYOUT_KEY = '/desktop/cinnamon/windows/button_layout';
+const BUTTON_LAYOUT_SCHEMA = 'org.cinnamon.overrides';
+const BUTTON_LAYOUT_KEY = 'button-layout';
 
 // Define a layout scheme for small window counts. For larger
 // counts we fall back to an algorithm. We need more schemes here
@@ -547,8 +548,8 @@ WindowOverlay.prototype = {
         let button = this.closeButton;
         let title = this.title;
 
-        let gconf = GConf.Client.get_default();
-        let layout = gconf.get_string(BUTTON_LAYOUT_KEY);
+        let settings = new Gio.Settings({ schema: BUTTON_LAYOUT_SCHEMA });
+        let layout = settings.get_string(BUTTON_LAYOUT_KEY);
         let rtl = St.Widget.get_default_direction() == St.TextDirection.RTL;
 
         let split = layout.split(":");
diff --git a/src/Makefile.am b/src/Makefile.am
index 182bf17..1cf7aec 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -277,7 +277,7 @@ Cinnamon_0_1_gir_CFLAGS = $(libcinnamon_la_CPPFLAGS) -I $(srcdir)
 Cinnamon_0_1_gir_LIBS = libcinnamon.la
 Cinnamon_0_1_gir_FILES = $(libcinnamon_la_gir_sources)
 Cinnamon_0_1_gir_SCANNERFLAGS = --include-uninstalled=$(builddir)/St-1.0.gir \
-	--add-include-path=$(MUFFIN_GIR_DIR)
+	--add-include-path=$(MUFFIN_GIR_DIR) -L $(BLUETOOTH_DIR)
 INTROSPECTION_GIRS += Cinnamon-0.1.gir
 CLEANFILES += Cinnamon-0.1.gir
 
diff --git a/src/cinnamon-global.c b/src/cinnamon-global.c
index 1a5ac8b..69472d0 100644
--- a/src/cinnamon-global.c
+++ b/src/cinnamon-global.c
@@ -15,6 +15,7 @@
 #endif
 
 #include <X11/extensions/Xfixes.h>
+#include <cogl-pango/cogl-pango.h>
 #include <canberra.h>
 #include <clutter/glx/clutter-glx.h>
 #include <clutter/x11/clutter-x11.h>
@@ -576,14 +577,18 @@ void
 cinnamon_global_set_stage_input_mode (CinnamonGlobal         *global,
                                    CinnamonStageInputMode  mode)
 {
+  MetaScreen *screen;
+
   g_return_if_fail (CINNAMON_IS_GLOBAL (global));
 
+  screen = meta_plugin_get_screen (global->plugin);
+
   if (mode == CINNAMON_STAGE_INPUT_MODE_NONREACTIVE || global->gtk_grab_active)
-    meta_plugin_set_stage_reactive (global->plugin, FALSE);
+    meta_empty_stage_input_region (screen);
   else if (mode == CINNAMON_STAGE_INPUT_MODE_FULLSCREEN || !global->input_region)
-    meta_plugin_set_stage_reactive (global->plugin, TRUE);
+    meta_set_stage_input_region (screen, None);
   else
-    meta_plugin_set_stage_input_region (global->plugin, global->input_region);
+    meta_set_stage_input_region (screen, global->input_region);
 
   if (mode == CINNAMON_STAGE_INPUT_MODE_FOCUSED)
     cinnamon_global_focus_stage (global);
@@ -718,6 +723,17 @@ cinnamon_global_set_stage_input_region (CinnamonGlobal *global,
 }
 
 /**
+ * cinnamon_global_get_stage:
+ *
+ * Return value: (transfer none): The default #ClutterStage
+ */
+ClutterStage *
+cinnamon_global_get_stage (CinnamonGlobal  *global)
+{
+  return global->stage;
+}
+
+/**
  * cinnamon_global_get_screen:
  *
  * Return value: (transfer none): The default #MetaScreen
@@ -803,6 +819,249 @@ global_stage_after_paint (ClutterStage *stage,
                         "clutter.stagePaintDone");
 }
 
+static void
+constrain_tooltip (StTooltip             *tooltip,
+                   const ClutterGeometry *geometry,
+                   ClutterGeometry       *adjusted_geometry,
+                   gpointer               data)
+{
+  const ClutterGeometry *tip_area = st_tooltip_get_tip_area (tooltip);
+  CinnamonGlobal *global = cinnamon_global_get ();
+  MetaScreen *screen = cinnamon_global_get_screen (global);
+  int n_monitors = meta_screen_get_n_monitors (screen);
+  int i;
+
+  *adjusted_geometry = *geometry;
+
+  /* A point that determines what screen we'll constrain to */
+  int x = tip_area->x + tip_area->width / 2;
+  int y = tip_area->y + tip_area->height / 2;
+
+  for (i = 0; i < n_monitors; i++)
+    {
+      MetaRectangle rect;
+      meta_screen_get_monitor_geometry (screen, i, &rect);
+      if (x >= rect.x && x < rect.x + rect.width &&
+          y >= rect.y && y < rect.y + rect.height)
+        {
+          if (adjusted_geometry->x + adjusted_geometry->width > rect.x + rect.width)
+            adjusted_geometry->x = rect.x + rect.width - adjusted_geometry->width;
+          if (adjusted_geometry->x < rect.x)
+            adjusted_geometry->x = rect.x;
+
+          if (adjusted_geometry->y + adjusted_geometry->height > rect.y + rect.height)
+            adjusted_geometry->y = rect.y + rect.height - adjusted_geometry->height;
+          if (adjusted_geometry->y < rect.y)
+            adjusted_geometry->y = rect.y;
+
+          return;
+        }
+    }
+}
+
+static void
+update_font_options (GtkSettings  *settings,
+                     ClutterStage *stage)
+{
+  StThemeContext *context;
+  ClutterBackend *backend;
+  gint dpi;
+  gint hinting;
+  gchar *hint_style_str;
+  cairo_hint_style_t hint_style = CAIRO_HINT_STYLE_NONE;
+  gint antialias;
+  cairo_antialias_t antialias_mode = CAIRO_ANTIALIAS_NONE;
+  cairo_font_options_t *options;
+
+  g_object_get (settings,
+                "gtk-xft-dpi", &dpi,
+                "gtk-xft-antialias", &antialias,
+                "gtk-xft-hinting", &hinting,
+                "gtk-xft-hintstyle", &hint_style_str,
+                NULL);
+
+  context = st_theme_context_get_for_stage (stage);
+
+  if (dpi != -1)
+    /* GTK stores resolution as 1024 * dots/inch */
+    st_theme_context_set_resolution (context, dpi / 1024);
+  else
+    st_theme_context_set_default_resolution (context);
+
+  st_tooltip_set_constrain_func (stage, constrain_tooltip, NULL, NULL);
+
+  /* Clutter (as of 0.9) passes comprehensively wrong font options
+   * override whatever set_font_flags() did above.
+   *
+   * http://bugzilla.openedhand.com/show_bug.cgi?id=1456
+   */
+  backend = clutter_get_default_backend ();
+  options = cairo_font_options_create ();
+
+  cairo_font_options_set_hint_metrics (options, CAIRO_HINT_METRICS_ON);
+
+  if (hinting >= 0 && !hinting)
+    {
+      hint_style = CAIRO_HINT_STYLE_NONE;
+    }
+  else if (hint_style_str)
+    {
+      if (strcmp (hint_style_str, "hintnone") == 0)
+        hint_style = CAIRO_HINT_STYLE_NONE;
+      else if (strcmp (hint_style_str, "hintslight") == 0)
+        hint_style = CAIRO_HINT_STYLE_SLIGHT;
+      else if (strcmp (hint_style_str, "hintmedium") == 0)
+        hint_style = CAIRO_HINT_STYLE_MEDIUM;
+      else if (strcmp (hint_style_str, "hintfull") == 0)
+        hint_style = CAIRO_HINT_STYLE_FULL;
+    }
+
+  g_free (hint_style_str);
+
+  cairo_font_options_set_hint_style (options, hint_style);
+
+  /* We don't want to turn on subpixel anti-aliasing; since Clutter
+   * doesn't currently have the code to support ARGB masks,
+   * generating them then squashing them back to A8 is pointless.
+   */
+  antialias_mode = (antialias < 0 || antialias) ? CAIRO_ANTIALIAS_GRAY
+                                                : CAIRO_ANTIALIAS_NONE;
+
+  cairo_font_options_set_antialias (options, antialias_mode);
+
+  clutter_backend_set_font_options (backend, options);
+  cairo_font_options_destroy (options);
+}
+
+static void
+settings_notify_cb (GtkSettings *settings,
+                    GParamSpec  *pspec,
+                    gpointer     data)
+{
+  update_font_options (settings, CLUTTER_STAGE (data));
+}
+
+static void
+cinnamon_fonts_init (ClutterStage *stage)
+{
+  GtkSettings *settings;
+  CoglPangoFontMap *fontmap;
+
+  /* Disable text mipmapping; it causes problems on pre-GEM Intel
+   * drivers and we should just be rendering text at the right
+   * size rather than scaling it. If we do effects where we dynamically
+   * zoom labels, then we might want to reconsider.
+   */
+  fontmap = COGL_PANGO_FONT_MAP (clutter_get_font_map ());
+  cogl_pango_font_map_set_use_mipmapping (fontmap, FALSE);
+
+  settings = gtk_settings_get_default ();
+  g_object_connect (settings,
+                    "signal::notify::gtk-xft-dpi",
+                    G_CALLBACK (settings_notify_cb), stage,
+                    "signal::notify::gtk-xft-antialias",
+                    G_CALLBACK (settings_notify_cb), stage,
+                    "signal::notify::gtk-xft-hinting",
+                    G_CALLBACK (settings_notify_cb), stage,
+                    "signal::notify::gtk-xft-hintstyle",
+                    G_CALLBACK (settings_notify_cb), stage,
+                    NULL);
+  update_font_options (settings, stage);
+}
+
+/* This is an IBus workaround. The flow of events with IBus is that every time
+ * it gets gets a key event, it:
+ *
+ *  Sends it to the daemon via D-Bus asynchronously
+ *  When it gets an reply, synthesizes a new GdkEvent and puts it into the
+ *   GDK event queue with gdk_event_put(), including
+ *   IBUS_FORWARD_MASK = 1 << 25 in the state to prevent a loop.
+ *
+ * (Normally, IBus uses the GTK+ key snooper mechanism to get the key
+ * events early, but since our key events aren't visible to GTK+ key snoopers,
+ * IBus will instead get the events via the standard
+ * GtkIMContext.filter_keypress() mechanism.)
+ *
+ * There are a number of potential problems here; probably the worst
+ * problem is that IBus doesn't forward the timestamp with the event
+ * so that every key event that gets delivered ends up with
+ * GDK_CURRENT_TIME.  This creates some very subtle bugs; for example
+ * if you have IBus running and a keystroke is used to trigger
+ * launching an application, focus stealing prevention won't work
+ * right. http://code.google.com/p/ibus/issues/detail?id=1184
+ *
+ * In any case, our normal flow of key events is:
+ *
+ *  GDK filter function => clutter_x11_handle_event => clutter actor
+ *
+ * So, if we see a key event that gets delivered via the GDK event handler
+ * function - then we know it must be one of these synthesized events, and
+ * we should push it back to clutter.
+ *
+ * To summarize, the full key event flow with IBus is:
+ *
+ *   GDK filter function
+ *     => Mutter
+ *     => gnome_cinnamon_plugin_xevent_filter()
+ *     => clutter_x11_handle_event()
+ *     => clutter event delivery to actor
+ *     => gtk_im_context_filter_event()
+ *     => sent to IBus daemon
+ *     => response received from IBus daemon
+ *     => gdk_event_put()
+ *     => GDK event handler
+ *     => <this function>
+ *     => clutter_event_put()
+ *     => clutter event delivery to actor
+ *
+ * Anything else we see here we just pass on to the normal GDK event handler
+ * gtk_main_do_event().
+ */
+static void
+gnome_cinnamon_gdk_event_handler (GdkEvent *event_gdk,
+                               gpointer  data)
+{
+  if (event_gdk->type == GDK_KEY_PRESS || event_gdk->type == GDK_KEY_RELEASE)
+    {
+      ClutterActor *stage;
+      Window stage_xwindow;
+
+      stage = CLUTTER_ACTOR (data);
+      stage_xwindow = clutter_x11_get_stage_window (CLUTTER_STAGE (stage));
+
+      if (GDK_WINDOW_XID (event_gdk->key.window) == stage_xwindow)
+        {
+          ClutterDeviceManager *device_manager = clutter_device_manager_get_default ();
+          ClutterInputDevice *keyboard = clutter_device_manager_get_core_device (device_manager,
+                                                                                 CLUTTER_KEYBOARD_DEVICE);
+
+          ClutterEvent *event_clutter = clutter_event_new ((event_gdk->type == GDK_KEY_PRESS) ?
+                                                           CLUTTER_KEY_PRESS : CLUTTER_KEY_RELEASE);
+          event_clutter->key.time = event_gdk->key.time;
+          event_clutter->key.flags = CLUTTER_EVENT_NONE;
+          event_clutter->key.stage = CLUTTER_STAGE (stage);
+          event_clutter->key.source = NULL;
+
+          /* This depends on ClutterModifierType and GdkModifierType being
+           * identical, which they are currently. (They both match the X
+           * modifier state in the low 16-bits and have the same extensions.) */
+          event_clutter->key.modifier_state = event_gdk->key.state;
+
+          event_clutter->key.keyval = event_gdk->key.keyval;
+          event_clutter->key.hardware_keycode = event_gdk->key.hardware_keycode;
+          event_clutter->key.unicode_value = gdk_keyval_to_unicode (event_clutter->key.keyval);
+          event_clutter->key.device = keyboard;
+
+          clutter_event_put (event_clutter);
+          clutter_event_free (event_clutter);
+
+          return;
+        }
+    }
+
+  gtk_main_do_event (event_gdk);
+}
+
 void
 _cinnamon_global_set_plugin (CinnamonGlobal *global,
                           MetaPlugin  *plugin)
@@ -821,7 +1080,7 @@ _cinnamon_global_set_plugin (CinnamonGlobal *global,
   global->gdk_screen = gdk_display_get_screen (global->gdk_display,
                                                meta_screen_get_screen_number (global->meta_screen));
 
-  global->stage = CLUTTER_STAGE (meta_plugin_get_stage (plugin));
+  global->stage = CLUTTER_STAGE (meta_get_stage_for_screen (global->meta_screen));
   global->stage_xwindow = clutter_x11_get_stage_window (global->stage);
   global->stage_gdk_window = gdk_x11_window_foreign_new_for_display (global->gdk_display,
                                                                      global->stage_xwindow);
@@ -848,6 +1107,10 @@ _cinnamon_global_set_plugin (CinnamonGlobal *global,
   g_signal_connect (global->meta_display, "notify::focus-window",
                     G_CALLBACK (focus_window_changed), global);
 
+  cinnamon_fonts_init (global->stage);
+
+  gdk_event_handler_set (gnome_cinnamon_gdk_event_handler, global->stage, NULL);
+
   global->focus_manager = st_focus_manager_get_for_stage (global->stage);
 }
 
@@ -1719,7 +1982,7 @@ grab_screenshot (ClutterActor *stage,
   guchar *data;
   int width, height;
 
-  meta_plugin_query_screen_size (screenshot_data->global->plugin, &width, &height);
+  meta_screen_get_size (screen, &width, &height);
   image = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, width, height);
   data = cairo_image_surface_get_data (image);
 
@@ -1827,7 +2090,7 @@ cinnamon_global_screenshot (CinnamonGlobal  *global,
   data->filename = g_strdup (filename);
   data->callback = callback;
 
-  stage = CLUTTER_ACTOR (meta_plugin_get_stage (global->plugin));
+  stage = CLUTTER_ACTOR (cinnamon_global_get_stage (global));
 
   g_signal_connect_after (stage, "paint", G_CALLBACK (grab_screenshot), (gpointer)data);
 
@@ -1869,7 +2132,7 @@ cinnamon_global_screenshot_area (CinnamonGlobal  *global,
   data->height = height;
   data->callback = callback;
 
-  stage = CLUTTER_ACTOR (meta_plugin_get_stage (global->plugin));
+  stage = CLUTTER_ACTOR (cinnamon_global_get_stage (global));
 
   g_signal_connect_after (stage, "paint", G_CALLBACK (grab_area_screenshot), (gpointer)data);
 
diff --git a/src/cinnamon-global.h b/src/cinnamon-global.h
index 332ab7b..3091252 100644
--- a/src/cinnamon-global.h
+++ b/src/cinnamon-global.h
@@ -29,6 +29,7 @@ GType cinnamon_global_get_type (void) G_GNUC_CONST;
 
 CinnamonGlobal   *cinnamon_global_get                       (void);
 
+ClutterStage  *cinnamon_global_get_stage                 (CinnamonGlobal *global);
 MetaScreen    *cinnamon_global_get_screen                (CinnamonGlobal *global);
 GdkScreen     *cinnamon_global_get_gdk_screen            (CinnamonGlobal *global);
 MetaDisplay   *cinnamon_global_get_display               (CinnamonGlobal *global);
diff --git a/src/cinnamon-plugin.c b/src/cinnamon-plugin.c
index f693ea4..aa0ef9e 100644
--- a/src/cinnamon-plugin.c
+++ b/src/cinnamon-plugin.c
@@ -316,6 +316,8 @@ static gboolean
 gnome_cinnamon_plugin_xevent_filter (MetaPlugin *plugin,
                                   XEvent     *xev)
 {
+  MetaScreen *screen = meta_plugin_get_screen (plugin);
+  ClutterStage *stage = CLUTTER_STAGE (meta_get_stage_for_screen (screen));
 
   CinnamonPlugin *cinnamon_plugin = CINNAMON_PLUGIN (plugin);
 #ifdef GLX_INTEL_swap_event
@@ -336,7 +338,7 @@ gnome_cinnamon_plugin_xevent_filter (MetaPlugin *plugin,
 #endif
 
   if ((xev->xany.type == EnterNotify || xev->xany.type == LeaveNotify)
-      && xev->xcrossing.window == clutter_x11_get_stage_window (CLUTTER_STAGE (clutter_stage_get_default ())))
+      && xev->xcrossing.window == clutter_x11_get_stage_window (stage))
     {
       /* If the pointer enters a child of the stage window (eg, a
        * trayicon), we want to consider it to still be in the stage,
diff --git a/src/cinnamon-recorder.c b/src/cinnamon-recorder.c
index a2d4c93..c6f49b7 100644
--- a/src/cinnamon-recorder.c
+++ b/src/cinnamon-recorder.c
@@ -341,7 +341,7 @@ recorder_update_memory_used (CinnamonRecorder *recorder,
            * seems like a bad idea.
            */
           recorder->only_paint = TRUE;
-          clutter_redraw (recorder->stage);
+          clutter_stage_ensure_redraw (recorder->stage);
           recorder->only_paint = FALSE;
         }
     }
diff --git a/src/cinnamon-wm.c b/src/cinnamon-wm.c
index 92bc128..75678fb 100644
--- a/src/cinnamon-wm.c
+++ b/src/cinnamon-wm.c
@@ -28,8 +28,6 @@ enum
   KILL_SWITCH_WORKSPACE,
   KILL_WINDOW_EFFECTS,
 
-  KEYBINDING,
-
   LAST_SIGNAL
 };
 
@@ -126,34 +124,6 @@ cinnamon_wm_class_init (CinnamonWMClass *klass)
 		  g_cclosure_marshal_VOID__OBJECT,
 		  G_TYPE_NONE, 1,
 		  META_TYPE_WINDOW_ACTOR);
-
-  /**
-   * CinnamonWM::keybinding:
-   * @cinnamonwm: the #CinnamonWM
-   * @binding: the keybinding name
-   * @mask: the modifier mask used
-   * @window: for window keybindings, the #MetaWindow
-   * @backwards: for "reversible" keybindings, whether or not
-   * the backwards (Shifted) variant was invoked
-   *
-   * Emitted when a keybinding captured via
-   * cinnamon_wm_takeover_keybinding() is invoked. The keybinding name
-   * (which has underscores, not hyphens) is also included as the
-   * detail of the signal name, so you can connect just specific
-   * keybindings.
-   */
-  cinnamon_wm_signals[KEYBINDING] =
-    g_signal_new ("keybinding",
-		  G_TYPE_FROM_CLASS (klass),
-		  G_SIGNAL_RUN_LAST | G_SIGNAL_DETAILED,
-		  0,
-		  NULL, NULL,
-		  _cinnamon_marshal_VOID__STRING_UINT_OBJECT_BOOLEAN,
-		  G_TYPE_NONE, 4,
-                  G_TYPE_STRING,
-                  G_TYPE_UINT,
-                  META_TYPE_WINDOW,
-                  G_TYPE_BOOLEAN);
 }
 
 void
@@ -325,36 +295,3 @@ cinnamon_wm_new (MetaPlugin *plugin)
   return wm;
 }
 
-static void
-cinnamon_wm_key_handler (MetaDisplay    *display,
-                      MetaScreen     *screen,
-                      MetaWindow     *window,
-                      XEvent         *event,
-                      MetaKeyBinding *binding,
-                      gpointer        data)
-{
-  CinnamonWM *wm = data;
-  gboolean backwards = (event->xkey.state & ShiftMask);
-
-  g_signal_emit (wm, cinnamon_wm_signals[KEYBINDING],
-                 g_quark_from_string (binding->name),
-                 binding->name, binding->mask, window, backwards);
-}
-
-/**
- * cinnamon_wm_takeover_keybinding:
- * @wm: the #CinnamonWM
- * @binding_name: a meta keybinding name
- *
- * Tells muffin to forward keypresses for @binding_name to Cinnamon
- * rather than processing them internally. This will cause a
- * #CinnamonWM::keybinding signal to be emitted when that key is pressed.
- */
-void
-cinnamon_wm_takeover_keybinding (CinnamonWM      *wm,
-                              const char   *binding_name)
-{
-  meta_keybindings_set_custom_handler (binding_name,
-                                       cinnamon_wm_key_handler,
-                                       wm, NULL);
-}
diff --git a/src/cinnamon-wm.h b/src/cinnamon-wm.h
index 3263cf9..3ad3bda 100644
--- a/src/cinnamon-wm.h
+++ b/src/cinnamon-wm.h
@@ -39,10 +39,6 @@ void     cinnamon_wm_completed_destroy          (CinnamonWM         *wm,
                                               MetaWindowActor *actor);
 void     cinnamon_wm_completed_switch_workspace (CinnamonWM         *wm);
 
-/* Keybinding stuff */
-void cinnamon_wm_takeover_keybinding (CinnamonWM    *wm,
-				   const char *binding_name);
-
 G_END_DECLS
 
 #endif /* __CINNAMON_WM_H__ */
diff --git a/src/cinnamon-xfixes-cursor.c b/src/cinnamon-xfixes-cursor.c
index 3582e64..c0360e2 100644
--- a/src/cinnamon-xfixes-cursor.c
+++ b/src/cinnamon-xfixes-cursor.c
@@ -321,19 +321,29 @@ cinnamon_xfixes_cursor_class_init (CinnamonXFixesCursorClass *klass)
 }
 
 /**
- * cinnamon_xfixes_cursor_get_default:
+ * cinnamon_xfixes_cursor_get_for_stage:
+ * @stage: (transfer none): The #ClutterStage to get the cursor for
  *
- * Return value: (transfer none): The global #CinnamonXFixesCursor singleton
+ * Return value: (transfer none): A #CinnamonXFixesCursor instance
  */
 CinnamonXFixesCursor *
-cinnamon_xfixes_cursor_get_default ()
+cinnamon_xfixes_cursor_get_for_stage (ClutterStage *stage)
 {
-  static CinnamonXFixesCursor *instance = NULL;
+  CinnamonXFixesCursor *instance;
+  static GQuark xfixes_cursor_quark;
+
+  if (G_UNLIKELY (xfixes_cursor_quark == 0))
+    xfixes_cursor_quark = g_quark_from_static_string ("cinnamon-xfixes-cursor");
+
+  instance = g_object_get_qdata (G_OBJECT (stage), xfixes_cursor_quark);
 
   if (instance == NULL)
-    instance = g_object_new (CINNAMON_TYPE_XFIXES_CURSOR,
-                             "stage", clutter_stage_get_default (),
-                             NULL);
+    {
+      instance = g_object_new (CINNAMON_TYPE_XFIXES_CURSOR,
+                               "stage", stage,
+                               NULL);
+      g_object_set_qdata (G_OBJECT (stage), xfixes_cursor_quark, instance);
+    }
 
   return instance;
 }
diff --git a/src/cinnamon-xfixes-cursor.h b/src/cinnamon-xfixes-cursor.h
index af65306..6153406 100644
--- a/src/cinnamon-xfixes-cursor.h
+++ b/src/cinnamon-xfixes-cursor.h
@@ -19,7 +19,7 @@ typedef struct _CinnamonXFixesCursorClass   CinnamonXFixesCursorClass;
 
 GType               cinnamon_xfixes_cursor_get_type     (void) G_GNUC_CONST;
 
-CinnamonXFixesCursor   *cinnamon_xfixes_cursor_get_default (void);
+CinnamonXFixesCursor   *cinnamon_xfixes_cursor_get_for_stage (ClutterStage *stage);
 
 void                cinnamon_xfixes_cursor_show (CinnamonXFixesCursor *xfixes_cursor);
 void                cinnamon_xfixes_cursor_hide (CinnamonXFixesCursor *xfixes_cursor);
diff --git a/src/main.c b/src/main.c
index 93e604c..3f88a61 100644
--- a/src/main.c
+++ b/src/main.c
@@ -33,6 +33,8 @@ extern GType gnome_cinnamon_plugin_get_type (void);
 #define CINNAMON_DBUS_SERVICE "org.Cinnamon"
 #define MAGNIFIER_DBUS_SERVICE "org.gnome.Magnifier"
 
+#define OVERRIDES_SCHEMA "org.cinnamon.overrides"
+
 static gboolean is_gdm_mode = FALSE;
 
 static void
@@ -132,263 +134,18 @@ cinnamon_dbus_init (gboolean replace)
 }
 
 static void
-constrain_tooltip (StTooltip             *tooltip,
-                   const ClutterGeometry *geometry,
-                   ClutterGeometry       *adjusted_geometry,
-                   gpointer               data)
-{
-  const ClutterGeometry *tip_area = st_tooltip_get_tip_area (tooltip);
-  CinnamonGlobal *global = cinnamon_global_get ();
-  MetaScreen *screen = cinnamon_global_get_screen (global);
-  int n_monitors = meta_screen_get_n_monitors (screen);
-  int i;
-
-  *adjusted_geometry = *geometry;
-
-  /* A point that determines what screen we'll constrain to */
-  int x = tip_area->x + tip_area->width / 2;
-  int y = tip_area->y + tip_area->height / 2;
-
-  for (i = 0; i < n_monitors; i++)
-    {
-      MetaRectangle rect;
-      meta_screen_get_monitor_geometry (screen, i, &rect);
-      if (x >= rect.x && x < rect.x + rect.width &&
-          y >= rect.y && y < rect.y + rect.height)
-        {
-          if (adjusted_geometry->x + adjusted_geometry->width > rect.x + rect.width)
-            adjusted_geometry->x = rect.x + rect.width - adjusted_geometry->width;
-          if (adjusted_geometry->x < rect.x)
-            adjusted_geometry->x = rect.x;
-
-          if (adjusted_geometry->y + adjusted_geometry->height > rect.y + rect.height)
-            adjusted_geometry->y = rect.y + rect.height - adjusted_geometry->height;
-          if (adjusted_geometry->y < rect.y)
-            adjusted_geometry->y = rect.y;
-
-          return;
-        }
-    }
-}
-
-static void
-update_font_options (GtkSettings *settings)
-{
-  StThemeContext *context;
-  ClutterStage *stage;
-  ClutterBackend *backend;
-  gint dpi;
-  gint hinting;
-  gchar *hint_style_str;
-  cairo_hint_style_t hint_style = CAIRO_HINT_STYLE_NONE;
-  gint antialias;
-  cairo_antialias_t antialias_mode = CAIRO_ANTIALIAS_NONE;
-  cairo_font_options_t *options;
-
-  g_object_get (settings,
-                "gtk-xft-dpi", &dpi,
-                "gtk-xft-antialias", &antialias,
-                "gtk-xft-hinting", &hinting,
-                "gtk-xft-hintstyle", &hint_style_str,
-                NULL);
-
-  stage = CLUTTER_STAGE (clutter_stage_get_default ());
-  context = st_theme_context_get_for_stage (stage);
-
-  if (dpi != -1)
-    /* GTK stores resolution as 1024 * dots/inch */
-    st_theme_context_set_resolution (context, dpi / 1024);
-  else
-    st_theme_context_set_default_resolution (context);
-
-  st_tooltip_set_constrain_func (stage, constrain_tooltip, NULL, NULL);
-
-  /* Clutter (as of 0.9) passes comprehensively wrong font options
-   * override whatever set_font_flags() did above.
-   *
-   * http://bugzilla.openedhand.com/show_bug.cgi?id=1456
-   */
-  backend = clutter_get_default_backend ();
-  options = cairo_font_options_create ();
-
-  cairo_font_options_set_hint_metrics (options, CAIRO_HINT_METRICS_ON);
-
-  if (hinting >= 0 && !hinting)
-    {
-      hint_style = CAIRO_HINT_STYLE_NONE;
-    }
-  else if (hint_style_str)
-    {
-      if (strcmp (hint_style_str, "hintnone") == 0)
-        hint_style = CAIRO_HINT_STYLE_NONE;
-      else if (strcmp (hint_style_str, "hintslight") == 0)
-        hint_style = CAIRO_HINT_STYLE_SLIGHT;
-      else if (strcmp (hint_style_str, "hintmedium") == 0)
-        hint_style = CAIRO_HINT_STYLE_MEDIUM;
-      else if (strcmp (hint_style_str, "hintfull") == 0)
-        hint_style = CAIRO_HINT_STYLE_FULL;
-    }
-
-  g_free (hint_style_str);
-
-  cairo_font_options_set_hint_style (options, hint_style);
-
-  /* We don't want to turn on subpixel anti-aliasing; since Clutter
-   * doesn't currently have the code to support ARGB masks,
-   * generating them then squashing them back to A8 is pointless.
-   */
-  antialias_mode = (antialias < 0 || antialias) ? CAIRO_ANTIALIAS_GRAY
-                                                : CAIRO_ANTIALIAS_NONE;
-
-  cairo_font_options_set_antialias (options, antialias_mode);
-
-  clutter_backend_set_font_options (backend, options);
-  cairo_font_options_destroy (options);
-}
-
-static void
-settings_notify_cb (GtkSettings *settings,
-                    GParamSpec  *pspec,
-                    gpointer     data)
-{
-  update_font_options (settings);
-}
-
-static void
-cinnamon_fonts_init (void)
-{
-  GtkSettings *settings;
-
-  /* Disable text mipmapping; it causes problems on pre-GEM Intel
-   * drivers and we should just be rendering text at the right
-   * size rather than scaling it. If we do effects where we dynamically
-   * zoom labels, then we might want to reconsider.
-   */
-  clutter_set_font_flags (clutter_get_font_flags () & ~CLUTTER_FONT_MIPMAPPING);
-
-  settings = gtk_settings_get_default ();
-  g_object_connect (settings,
-                    "signal::notify::gtk-xft-dpi",
-                    G_CALLBACK (settings_notify_cb), NULL,
-                    "signal::notify::gtk-xft-antialias",
-                    G_CALLBACK (settings_notify_cb), NULL,
-                    "signal::notify::gtk-xft-hinting",
-                    G_CALLBACK (settings_notify_cb), NULL,
-                    "signal::notify::gtk-xft-hintstyle",
-                    G_CALLBACK (settings_notify_cb), NULL,
-                    NULL);
-  update_font_options (settings);
-}
-
-static void
 cinnamon_prefs_init (void)
 {
-  meta_prefs_override_preference_location ("/apps/muffin/general/attach_modal_dialogs",
-                                           "/desktop/cinnamon/windows/attach_modal_dialogs");
-  meta_prefs_override_preference_location ("/apps/muffin/general/workspaces_only_on_primary",
-                                           "/desktop/cinnamon/windows/workspaces_only_on_primary");
-  meta_prefs_override_preference_location ("/apps/metacity/general/button_layout",
-                                           "/desktop/cinnamon/windows/button_layout");
-  meta_prefs_override_preference_location ("/apps/metacity/general/edge_tiling",
-                                           "/desktop/cinnamon/windows/edge_tiling");
-  meta_prefs_override_preference_location ("/apps/metacity/general/theme",
-                                           "/desktop/cinnamon/windows/theme");
-}
-
-/* This is an IBus workaround. The flow of events with IBus is that every time
- * it gets gets a key event, it:
- *
- *  Sends it to the daemon via D-Bus asynchronously
- *  When it gets an reply, synthesizes a new GdkEvent and puts it into the
- *   GDK event queue with gdk_event_put(), including
- *   IBUS_FORWARD_MASK = 1 << 25 in the state to prevent a loop.
- *
- * (Normally, IBus uses the GTK+ key snooper mechanism to get the key
- * events early, but since our key events aren't visible to GTK+ key snoopers,
- * IBus will instead get the events via the standard
- * GtkIMContext.filter_keypress() mechanism.)
- *
- * There are a number of potential problems here; probably the worst
- * problem is that IBus doesn't forward the timestamp with the event
- * so that every key event that gets delivered ends up with
- * GDK_CURRENT_TIME.  This creates some very subtle bugs; for example
- * if you have IBus running and a keystroke is used to trigger
- * launching an application, focus stealing prevention won't work
- * right. http://code.google.com/p/ibus/issues/detail?id=1184
- *
- * In any case, our normal flow of key events is:
- *
- *  GDK filter function => clutter_x11_handle_event => clutter actor
- *
- * So, if we see a key event that gets delivered via the GDK event handler
- * function - then we know it must be one of these synthesized events, and
- * we should push it back to clutter.
- *
- * To summarize, the full key event flow with IBus is:
- *
- *   GDK filter function
- *     => Muffin
- *     => gnome_cinnamon_plugin_xevent_filter()
- *     => clutter_x11_handle_event()
- *     => clutter event delivery to actor
- *     => gtk_im_context_filter_event()
- *     => sent to IBus daemon
- *     => response received from IBus daemon
- *     => gdk_event_put()
- *     => GDK event handler
- *     => <this function>
- *     => clutter_event_put()
- *     => clutter event delivery to actor
- *
- * Anything else we see here we just pass on to the normal GDK event handler
- * gtk_main_do_event().
- */
-static void
-gnome_cinnamon_gdk_event_handler (GdkEvent *event_gdk,
-                               gpointer  data)
-{
-  if (event_gdk->type == GDK_KEY_PRESS || event_gdk->type == GDK_KEY_RELEASE)
-    {
-      ClutterActor *stage;
-      Window stage_xwindow;
-
-      stage = clutter_stage_get_default ();
-      stage_xwindow = clutter_x11_get_stage_window (CLUTTER_STAGE (stage));
-
-      if (GDK_WINDOW_XID (event_gdk->key.window) == stage_xwindow)
-        {
-          ClutterDeviceManager *device_manager = clutter_device_manager_get_default ();
-          ClutterInputDevice *keyboard = clutter_device_manager_get_core_device (device_manager,
-                                                                                 CLUTTER_KEYBOARD_DEVICE);
-
-          ClutterEvent *event_clutter = clutter_event_new ((event_gdk->type == GDK_KEY_PRESS) ?
-                                                           CLUTTER_KEY_PRESS : CLUTTER_KEY_RELEASE);
-          event_clutter->key.time = event_gdk->key.time;
-          event_clutter->key.flags = CLUTTER_EVENT_NONE;
-          event_clutter->key.stage = CLUTTER_STAGE (stage);
-          event_clutter->key.source = NULL;
-
-          /* This depends on ClutterModifierType and GdkModifierType being
-           * identical, which they are currently. (They both match the X
-           * modifier state in the low 16-bits and have the same extensions.) */
-          event_clutter->key.modifier_state = event_gdk->key.state;
-
-          event_clutter->key.keyval = event_gdk->key.keyval;
-          event_clutter->key.hardware_keycode = event_gdk->key.hardware_keycode;
-          event_clutter->key.unicode_value = gdk_keyval_to_unicode (event_clutter->key.keyval);
-          event_clutter->key.device = keyboard;
-
-          clutter_event_put (event_clutter);
-          clutter_event_free (event_clutter);
-
-          return;
-        }
-    }
-
-  gtk_main_do_event (event_gdk);
+  meta_prefs_override_preference_schema ("attach-modal-dialogs",
+                                         OVERRIDES_SCHEMA);
+  meta_prefs_override_preference_schema ("workspaces-only-on-primary",
+                                         OVERRIDES_SCHEMA);
+  meta_prefs_override_preference_schema ("button-layout",
+                                         OVERRIDES_SCHEMA);
+  meta_prefs_override_preference_schema ("edge-tiling",
+                                         OVERRIDES_SCHEMA);
 }
 
-
 static void
 malloc_statistics_callback (CinnamonPerfLog *perf_log,
                             gpointer      data)
@@ -531,12 +288,9 @@ main (int argc, char **argv)
 
   cinnamon_dbus_init (meta_get_replace_current_wm ());
   cinnamon_a11y_init ();
-  cinnamon_fonts_init ();
   cinnamon_perf_log_init ();
   cinnamon_prefs_init ();
 
-  gdk_event_handler_set (gnome_cinnamon_gdk_event_handler, NULL, NULL);
-
   g_irepository_prepend_search_path (CINNAMON_PKGLIBDIR);
 #if HAVE_BLUETOOTH
   g_irepository_prepend_search_path (BLUETOOTH_DIR);
diff --git a/src/st/st-scroll-bar.c b/src/st/st-scroll-bar.c
index e6eb81f..1eb0791 100644
--- a/src/st/st-scroll-bar.c
+++ b/src/st/st-scroll-bar.c
@@ -777,16 +777,16 @@ move_slider (StScrollBar *bar,
 static void
 stop_scrolling (StScrollBar *bar)
 {
-  ClutterActor *stage;
+  ClutterStage *stage;
 
   if (!bar->priv->capture_handler)
     return;
 
-  stage = clutter_actor_get_stage (bar->priv->trough);
+  stage = CLUTTER_STAGE (clutter_actor_get_stage (bar->priv->trough));
   g_signal_handler_disconnect (stage, bar->priv->capture_handler);
   bar->priv->capture_handler = 0;
 
-  clutter_set_motion_events_enabled (TRUE);
+  clutter_stage_set_motion_events_enabled (stage, TRUE);
   g_signal_emit (bar, signals[SCROLL_STOP], 0);
 }
 
@@ -829,6 +829,7 @@ handle_button_press_event_cb (ClutterActor       *actor,
                               ClutterButtonEvent *event,
                               StScrollBar        *bar)
 {
+  ClutterStage *stage;
   StScrollBarPrivate *priv = bar->priv;
 
   if (event->button != 1)
@@ -845,8 +846,10 @@ handle_button_press_event_cb (ClutterActor       *actor,
   priv->x_origin += clutter_actor_get_x (priv->trough);
   priv->y_origin += clutter_actor_get_y (priv->trough);
 
+  stage = CLUTTER_STAGE (clutter_actor_get_stage (bar->priv->trough));
+
   /* Turn off picking for motion events */
-  clutter_set_motion_events_enabled (FALSE);
+  clutter_stage_set_motion_events_enabled (stage, FALSE);
 
   priv->capture_handler = g_signal_connect_after (
     clutter_actor_get_stage (priv->trough),
diff --git a/src/st/test-theme.c b/src/st/test-theme.c
index db7f747..73dbc93 100644
--- a/src/st/test-theme.c
+++ b/src/st/test-theme.c
@@ -432,7 +432,7 @@ main (int argc, char **argv)
   theme = st_theme_new ("st/test-theme.css",
                         NULL, NULL);
 
-  stage = clutter_stage_get_default ();
+  stage = clutter_stage_new ();
   context = st_theme_context_get_for_stage (CLUTTER_STAGE (stage));
   st_theme_context_set_theme (context, theme);
   st_theme_context_set_resolution (context, 96.);
diff --git a/src/test-recorder.c b/src/test-recorder.c
index a9804a9..26fbc4e 100644
--- a/src/test-recorder.c
+++ b/src/test-recorder.c
@@ -37,7 +37,8 @@ int main (int argc, char **argv)
   clutter_color_from_string (&red, "red");
   clutter_color_from_string (&green, "green");
   clutter_color_from_string (&blue, "blue");
-  stage = clutter_stage_get_default ();
+  stage = clutter_stage_new ();
+  g_signal_connect (stage, "destroy", G_CALLBACK (clutter_main_quit), NULL);
 
   text = g_object_new (CLUTTER_TYPE_TEXT,
 		       "text", "Red",
